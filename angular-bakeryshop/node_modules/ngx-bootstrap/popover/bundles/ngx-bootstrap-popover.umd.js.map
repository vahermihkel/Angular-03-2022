{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/popover/bundles/ngx-bootstrap-popover.umd.js"],"names":[],"mappings":"AAAA;6SACyP;uPACpC;;0FAEzI;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA4BvE;;;;6GAGC;;;;;;;;;;;;;;;;;;;;;WAqBC,AAgBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2LA,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAuBA;;;;;;;;;;;;;;;;;;;;;;UAsBA;;;;;;;;;;;;;+KAQA","file":"ngx-bootstrap-popover.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/component-loader'), require('ngx-bootstrap/utils'), require('ngx-bootstrap/positioning'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/popover', ['exports', '@angular/core', 'ngx-bootstrap/component-loader', 'ngx-bootstrap/utils', 'ngx-bootstrap/positioning', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].popover = {}), global.ng.core, global.componentLoader, global.utils, global.positioning, global.ng.common));\n}(this, function (exports, core, componentLoader, utils, positioning, common) { 'use strict';\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * Configuration service for the Popover directive.\n     * You can inject this service, typically in your root component, and customize\n     * the values of its properties in order to provide default values for all the\n     * popovers used in the application.\n     */\n    var PopoverConfig = /** @class */ (function () {\n        function PopoverConfig() {\n            /**\n             * sets disable adaptive position\n             */\n            this.adaptivePosition = true;\n            /**\n             * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\n             */\n            this.placement = 'top';\n            /**\n             * Specifies events that should trigger. Supports a space separated list of\n             * event names.\n             */\n            this.triggers = 'click';\n            this.outsideClick = false;\n        }\n        PopoverConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return PopoverConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var PopoverContainerComponent = /** @class */ (function () {\n        function PopoverContainerComponent(config) {\n            Object.assign(this, config);\n        }\n        Object.defineProperty(PopoverContainerComponent.prototype, \"isBs3\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return utils.isBs3();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PopoverContainerComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'popover-container',\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        // tslint:disable-next-line\n                        host: {\n                            '[class]': '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\n                            '[class.show]': '!isBs3',\n                            '[class.bs3]': 'isBs3',\n                            role: 'tooltip',\n                            style: 'display:block;'\n                        },\n                        template: \"<div class=\\\"popover-arrow arrow\\\"></div>\\n<h3 class=\\\"popover-title popover-header\\\" *ngIf=\\\"title\\\">{{ title }}</h3>\\n<div class=\\\"popover-content popover-body\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n                        styles: [\"\\n    :host.bs3.popover-top {\\n      margin-bottom: 10px;\\n    }\\n    :host.bs3.popover.top>.arrow {\\n      margin-left: -2px;\\n    }\\n    :host.bs3.popover.top {\\n      margin-bottom: 10px;\\n    }\\n    :host.popover.bottom>.arrow {\\n      margin-left: -4px;\\n    }\\n    :host.bs3.bs-popover-left {\\n      margin-right: .5rem;\\n    }\\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\\n      margin: .3rem 0;\\n    }\\n    \"]\n                    }] }\n        ];\n        /** @nocollapse */\n        PopoverContainerComponent.ctorParameters = function () { return [\n            { type: PopoverConfig }\n        ]; };\n        PopoverContainerComponent.propDecorators = {\n            placement: [{ type: core.Input }],\n            title: [{ type: core.Input }]\n        };\n        return PopoverContainerComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * A lightweight, extensible directive for fancy popover creation.\n     */\n    var PopoverDirective = /** @class */ (function () {\n        function PopoverDirective(_config, _elementRef, _renderer, _viewContainerRef, cis, _positionService) {\n            this._positionService = _positionService;\n            /**\n             * Close popover on outside click\n             */\n            this.outsideClick = false;\n            /**\n             * Css class for popover container\n             */\n            this.containerClass = '';\n            this._isInited = false;\n            this._popover = cis\n                .createLoader(_elementRef, _viewContainerRef, _renderer)\n                .provide({ provide: PopoverConfig, useValue: _config });\n            Object.assign(this, _config);\n            this.onShown = this._popover.onShown;\n            this.onHidden = this._popover.onHidden;\n            // fix: no focus on button on Mac OS #1795\n            if (typeof window !== 'undefined') {\n                _elementRef.nativeElement.addEventListener('click', (/**\n                 * @return {?}\n                 */\n                function () {\n                    try {\n                        _elementRef.nativeElement.focus();\n                    }\n                    catch (err) {\n                        return;\n                    }\n                }));\n            }\n        }\n        Object.defineProperty(PopoverDirective.prototype, \"isOpen\", {\n            /**\n             * Returns whether or not the popover is currently being shown\n             */\n            get: /**\n             * Returns whether or not the popover is currently being shown\n             * @return {?}\n             */\n            function () {\n                return this._popover.isShown;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                if (value) {\n                    this.show();\n                }\n                else {\n                    this.hide();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Opens an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         */\n        /**\n         * Opens an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        PopoverDirective.prototype.show = /**\n         * Opens an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        function () {\n            if (this._popover.isShown || !this.popover) {\n                return;\n            }\n            this._positionService.setOptions({\n                modifiers: {\n                    flip: {\n                        enabled: this.adaptivePosition\n                    },\n                    preventOverflow: {\n                        enabled: this.adaptivePosition\n                    }\n                }\n            });\n            this._popover\n                .attach(PopoverContainerComponent)\n                .to(this.container)\n                .position({ attachment: this.placement })\n                .show({\n                content: this.popover,\n                context: this.popoverContext,\n                placement: this.placement,\n                title: this.popoverTitle,\n                containerClass: this.containerClass\n            });\n            if (!this.adaptivePosition) {\n                this._positionService.calcPosition();\n                this._positionService.deletePositionElement(this._popover._componentRef.location);\n            }\n            this.isOpen = true;\n        };\n        /**\n         * Closes an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         */\n        /**\n         * Closes an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        PopoverDirective.prototype.hide = /**\n         * Closes an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        function () {\n            if (this.isOpen) {\n                this._popover.hide();\n                this.isOpen = false;\n            }\n        };\n        /**\n         * Toggles an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         */\n        /**\n         * Toggles an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        PopoverDirective.prototype.toggle = /**\n         * Toggles an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        function () {\n            if (this.isOpen) {\n                return this.hide();\n            }\n            this.show();\n        };\n        /**\n         * @return {?}\n         */\n        PopoverDirective.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            // fix: seems there are an issue with `routerLinkActive`\n            // which result in duplicated call ngOnInit without call to ngOnDestroy\n            // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n            if (this._isInited) {\n                return;\n            }\n            this._isInited = true;\n            this._popover.listen({\n                triggers: this.triggers,\n                outsideClick: this.outsideClick,\n                show: (/**\n                 * @return {?}\n                 */\n                function () { return _this.show(); })\n            });\n        };\n        /**\n         * @return {?}\n         */\n        PopoverDirective.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            this._popover.dispose();\n        };\n        PopoverDirective.decorators = [\n            { type: core.Directive, args: [{ selector: '[popover]', exportAs: 'bs-popover' },] }\n        ];\n        /** @nocollapse */\n        PopoverDirective.ctorParameters = function () { return [\n            { type: PopoverConfig },\n            { type: core.ElementRef },\n            { type: core.Renderer2 },\n            { type: core.ViewContainerRef },\n            { type: componentLoader.ComponentLoaderFactory },\n            { type: positioning.PositioningService }\n        ]; };\n        PopoverDirective.propDecorators = {\n            adaptivePosition: [{ type: core.Input }],\n            popover: [{ type: core.Input }],\n            popoverContext: [{ type: core.Input }],\n            popoverTitle: [{ type: core.Input }],\n            placement: [{ type: core.Input }],\n            outsideClick: [{ type: core.Input }],\n            triggers: [{ type: core.Input }],\n            container: [{ type: core.Input }],\n            containerClass: [{ type: core.Input }],\n            isOpen: [{ type: core.Input }],\n            onShown: [{ type: core.Output }],\n            onHidden: [{ type: core.Output }]\n        };\n        return PopoverDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var PopoverModule = /** @class */ (function () {\n        function PopoverModule() {\n        }\n        /**\n         * @return {?}\n         */\n        PopoverModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return {\n                ngModule: PopoverModule,\n                providers: [PopoverConfig, componentLoader.ComponentLoaderFactory, positioning.PositioningService]\n            };\n        };\n        PopoverModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [PopoverDirective, PopoverContainerComponent],\n                        exports: [PopoverDirective],\n                        entryComponents: [PopoverContainerComponent]\n                    },] }\n        ];\n        return PopoverModule;\n    }());\n\n    exports.PopoverConfig = PopoverConfig;\n    exports.PopoverContainerComponent = PopoverContainerComponent;\n    exports.PopoverDirective = PopoverDirective;\n    exports.PopoverModule = PopoverModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}