/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
var TypeaheadConfig = /** @class */ (function () {
    function TypeaheadConfig() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
TypeaheadConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, { adaptivePosition: [], isAnimated: [], hideResultsOnBlur: [], selectFirstItem: [], isFirstItemActive: [], minLength: [] });
    return TypeaheadConfig;
}());
export { TypeaheadConfig };
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC90eXBlYWhlYWQvZXNtNS90eXBlYWhlYWQuY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBMkJLOzs7O2dLQUdDIiwiZmlsZSI6InR5cGVhaGVhZC5jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdHlwZWFoZWFkXG4gKi9cbnZhciBUeXBlYWhlYWRDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHlwZWFoZWFkQ29uZmlnKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogc2V0cyB1c2UgYWRhcHRpdmUgcG9zaXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWRhcHRpdmVQb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdHVybiBvbi9vZmYgYW5pbWF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gaGlkZSByZXN1bHRzIG9uIGJsdXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGlkZVJlc3VsdHNPbkJsdXIgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBjaG9vc2UgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RGaXJzdEl0ZW0gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBhY3RpdmUvaW5hY3RpdmUgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0ZpcnN0SXRlbUFjdGl2ZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGNob29zZSBzZXQgbWluaW1hbCBubyBvZiBjaGFyYWN0ZXJzIHRoYXQgbmVlZHMgdG9cbiAgICAgICAgICogYmUgZW50ZXJlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pbkxlbmd0aCA9IDE7XG4gICAgfVxuICAgIFR5cGVhaGVhZENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIFR5cGVhaGVhZENvbmZpZztcbn0oKSk7XG5leHBvcnQgeyBUeXBlYWhlYWRDb25maWcgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5hZGFwdGl2ZVBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIHR1cm4gb24vb2ZmIGFuaW1hdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuaXNBbmltYXRlZDtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGhpZGUgcmVzdWx0cyBvbiBibHVyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5oaWRlUmVzdWx0c09uQmx1cjtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGNob29zZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5zZWxlY3RGaXJzdEl0ZW07XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBhY3RpdmUvaW5hY3RpdmUgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuaXNGaXJzdEl0ZW1BY3RpdmU7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjaG9vc2Ugc2V0IG1pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvXG4gICAgICogYmUgZW50ZXJlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5taW5MZW5ndGg7XG59XG4iXX0=