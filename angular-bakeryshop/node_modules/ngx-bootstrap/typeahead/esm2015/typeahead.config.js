/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for typeahead
 */
import * as ɵngcc0 from '@angular/core';
export class TypeaheadConfig {
    constructor() {
        /**
         * sets use adaptive position
         */
        this.adaptivePosition = false;
        /**
         * turn on/off animation
         */
        this.isAnimated = false;
        /**
         * used to hide results on blur
         */
        this.hideResultsOnBlur = true;
        /**
         * used to choose the first item in typeahead container
         */
        this.selectFirstItem = true;
        /**
         * used to active/inactive the first item in typeahead container
         */
        this.isFirstItemActive = true;
        /**
         * used to choose set minimal no of characters that needs to
         * be entered before typeahead kicks-in
         */
        this.minLength = 1;
    }
}
TypeaheadConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TypeaheadConfig, factory: function TypeaheadConfig_Factory(t) { return new (t || TypeaheadConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TypeaheadConfig, [{
        type: Injectable
    }], function () { return []; }, { constructor: [], adaptivePosition: [], isAnimated: [], hideResultsOnBlur: [], selectFirstItem: [], isFirstItemActive: [], minLength: [] });
if (false) {
    /**
     * sets use adaptive position
     * @type {?}
     */
    TypeaheadConfig.prototype.adaptivePosition;
    /**
     * turn on/off animation
     * @type {?}
     */
    TypeaheadConfig.prototype.isAnimated;
    /**
     * used to hide results on blur
     * @type {?}
     */
    TypeaheadConfig.prototype.hideResultsOnBlur;
    /**
     * used to choose the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.selectFirstItem;
    /**
     * used to active/inactive the first item in typeahead container
     * @type {?}
     */
    TypeaheadConfig.prototype.isFirstItemActive;
    /**
     * used to choose set minimal no of characters that needs to
     * be entered before typeahead kicks-in
     * @type {?}
     */
    TypeaheadConfig.prototype.minLength;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC90eXBlYWhlYWQvZXNtMjAxNS90eXBlYWhlYWQuY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E0QkMsZ0xBR0MiLCJmaWxlIjoidHlwZWFoZWFkLmNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIERlZmF1bHQgdmFsdWVzIHByb3ZpZGVyIGZvciB0eXBlYWhlYWRcbiAqL1xuZXhwb3J0IGNsYXNzIFR5cGVhaGVhZENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzZXRzIHVzZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGFwdGl2ZVBvc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0dXJuIG9uL29mZiBhbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdXNlZCB0byBoaWRlIHJlc3VsdHMgb24gYmx1clxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oaWRlUmVzdWx0c09uQmx1ciA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGNob29zZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlbGVjdEZpcnN0SXRlbSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VkIHRvIGFjdGl2ZS9pbmFjdGl2ZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzRmlyc3RJdGVtQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVzZWQgdG8gY2hvb3NlIHNldCBtaW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0b1xuICAgICAgICAgKiBiZSBlbnRlcmVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWluTGVuZ3RoID0gMTtcbiAgICB9XG59XG5UeXBlYWhlYWRDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIHNldHMgdXNlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5hZGFwdGl2ZVBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIHR1cm4gb24vb2ZmIGFuaW1hdGlvblxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuaXNBbmltYXRlZDtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGhpZGUgcmVzdWx0cyBvbiBibHVyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5oaWRlUmVzdWx0c09uQmx1cjtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGNob29zZSB0aGUgZmlyc3QgaXRlbSBpbiB0eXBlYWhlYWQgY29udGFpbmVyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5zZWxlY3RGaXJzdEl0ZW07XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBhY3RpdmUvaW5hY3RpdmUgdGhlIGZpcnN0IGl0ZW0gaW4gdHlwZWFoZWFkIGNvbnRhaW5lclxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFR5cGVhaGVhZENvbmZpZy5wcm90b3R5cGUuaXNGaXJzdEl0ZW1BY3RpdmU7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjaG9vc2Ugc2V0IG1pbmltYWwgbm8gb2YgY2hhcmFjdGVycyB0aGF0IG5lZWRzIHRvXG4gICAgICogYmUgZW50ZXJlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5taW5MZW5ndGg7XG59XG4iXX0=