/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ModalOptions {
}
ModalOptions.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: function ModalOptions_Factory(t) { return new (t || ModalOptions)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], null, null);
if (false) {
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
}
/** @type {?} */
export const modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export const CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export const SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export const TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export const DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC9tb2RhbC9lc20yMDE1L21vZGFsLW9wdGlvbnMuY2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7OztDQUNDLG1CQUdDIiwiZmlsZSI6Im1vZGFsLW9wdGlvbnMuY2xhc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGNsYXNzIE1vZGFsT3B0aW9ucyB7XG59XG5Nb2RhbE9wdGlvbnMuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqICBJbmNsdWRlcyBhIG1vZGFsLWJhY2tkcm9wIGVsZW1lbnQuIEFsdGVybmF0aXZlbHksXG4gICAgICogIHNwZWNpZnkgc3RhdGljIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYmFja2Ryb3A7XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBtb2RhbCB3aGVuIGVzY2FwZSBrZXkgaXMgcHJlc3NlZC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmtleWJvYXJkO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmZvY3VzO1xuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBtb2RhbCB3aGVuIGluaXRpYWxpemVkLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuc2hvdztcbiAgICAvKipcbiAgICAgKiBJZ25vcmUgdGhlIGJhY2tkcm9wIGNsaWNrXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5pZ25vcmVCYWNrZHJvcENsaWNrO1xuICAgIC8qKlxuICAgICAqIENzcyBjbGFzcyBmb3Igb3BlbmVkIG1vZGFsXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5jbGFzcztcbiAgICAvKipcbiAgICAgKiBUb2dnbGUgYW5pbWF0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5hbmltYXRlZDtcbiAgICAvKipcbiAgICAgKiBNb2RhbCBkYXRhXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5pbml0aWFsU3RhdGU7XG59XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgY29uc3QgbW9kYWxDb25maWdEZWZhdWx0cyA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBmb2N1czogdHJ1ZSxcbiAgICBzaG93OiBmYWxzZSxcbiAgICBpZ25vcmVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgICBjbGFzczogJycsXG4gICAgYW5pbWF0ZWQ6IHRydWUsXG4gICAgaW5pdGlhbFN0YXRlOiB7fVxufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FID0ge1xuICAgIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICBPUEVOOiAnbW9kYWwtb3BlbicsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIElOOiAnaW4nLFxuICAgIC8vIGJzM1xuICAgIFNIT1c6ICdzaG93JyAvLyBiczRcbn07XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgY29uc3QgU0VMRUNUT1IgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgICBGSVhFRF9DT05URU5UOiAnLm5hdmJhci1maXhlZC10b3AsIC5uYXZiYXItZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQnXG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TSVRJT05fRFVSQVRJT05TID0ge1xuICAgIE1PREFMOiAzMDAsXG4gICAgQkFDS0RST1A6IDE1MFxufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBESVNNSVNTX1JFQVNPTlMgPSB7XG4gICAgQkFDS1JET1A6ICdiYWNrZHJvcC1jbGljaycsXG4gICAgRVNDOiAnZXNjJ1xufTtcbiJdfQ==