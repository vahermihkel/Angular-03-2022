/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var ModalOptions = /** @class */ (function () {
    function ModalOptions() {
    }
ModalOptions.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ModalOptions, factory: function ModalOptions_Factory(t) { return new (t || ModalOptions)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ModalOptions, [{
        type: Injectable
    }], function () { return []; }, null);
    return ModalOptions;
}());
export { ModalOptions };
if (false) {
    /**
     *  Includes a modal-backdrop element. Alternatively,
     *  specify static for a backdrop which doesn't close the modal on click.
     * @type {?}
     */
    ModalOptions.prototype.backdrop;
    /**
     * Closes the modal when escape key is pressed.
     * @type {?}
     */
    ModalOptions.prototype.keyboard;
    /** @type {?} */
    ModalOptions.prototype.focus;
    /**
     * Shows the modal when initialized.
     * @type {?}
     */
    ModalOptions.prototype.show;
    /**
     * Ignore the backdrop click
     * @type {?}
     */
    ModalOptions.prototype.ignoreBackdropClick;
    /**
     * Css class for opened modal
     * @type {?}
     */
    ModalOptions.prototype.class;
    /**
     * Toggle animation
     * @type {?}
     */
    ModalOptions.prototype.animated;
    /**
     * Modal data
     * @type {?}
     */
    ModalOptions.prototype.initialState;
}
/** @type {?} */
export var modalConfigDefaults = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: false,
    class: '',
    animated: true,
    initialState: {}
};
/** @type {?} */
export var CLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
export var SELECTOR = {
    DIALOG: '.modal-dialog',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.navbar-fixed-top, .navbar-fixed-bottom, .is-fixed'
};
/** @type {?} */
export var TRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
export var DISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC9tb2RhbC9lc201L21vZGFsLW9wdGlvbnMuY2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOztLQUVLOzs7OzBDQUdDIiwiZmlsZSI6Im1vZGFsLW9wdGlvbnMuY2xhc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xudmFyIE1vZGFsT3B0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RhbE9wdGlvbnMoKSB7XG4gICAgfVxuICAgIE1vZGFsT3B0aW9ucy5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIE1vZGFsT3B0aW9ucztcbn0oKSk7XG5leHBvcnQgeyBNb2RhbE9wdGlvbnMgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqICBJbmNsdWRlcyBhIG1vZGFsLWJhY2tkcm9wIGVsZW1lbnQuIEFsdGVybmF0aXZlbHksXG4gICAgICogIHNwZWNpZnkgc3RhdGljIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYmFja2Ryb3A7XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBtb2RhbCB3aGVuIGVzY2FwZSBrZXkgaXMgcHJlc3NlZC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmtleWJvYXJkO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBNb2RhbE9wdGlvbnMucHJvdG90eXBlLmZvY3VzO1xuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBtb2RhbCB3aGVuIGluaXRpYWxpemVkLlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE1vZGFsT3B0aW9ucy5wcm90b3R5cGUuc2hvdztcbiAgICAvKipcbiAgICAgKiBJZ25vcmUgdGhlIGJhY2tkcm9wIGNsaWNrXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5pZ25vcmVCYWNrZHJvcENsaWNrO1xuICAgIC8qKlxuICAgICAqIENzcyBjbGFzcyBmb3Igb3BlbmVkIG1vZGFsXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5jbGFzcztcbiAgICAvKipcbiAgICAgKiBUb2dnbGUgYW5pbWF0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5hbmltYXRlZDtcbiAgICAvKipcbiAgICAgKiBNb2RhbCBkYXRhXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTW9kYWxPcHRpb25zLnByb3RvdHlwZS5pbml0aWFsU3RhdGU7XG59XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgdmFyIG1vZGFsQ29uZmlnRGVmYXVsdHMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgZm9jdXM6IHRydWUsXG4gICAgc2hvdzogZmFsc2UsXG4gICAgaWdub3JlQmFja2Ryb3BDbGljazogZmFsc2UsXG4gICAgY2xhc3M6ICcnLFxuICAgIGFuaW1hdGVkOiB0cnVlLFxuICAgIGluaXRpYWxTdGF0ZToge31cbn07XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgdmFyIENMQVNTX05BTUUgPSB7XG4gICAgU0NST0xMQkFSX01FQVNVUkVSOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICAgIEJBQ0tEUk9QOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgSU46ICdpbicsXG4gICAgLy8gYnMzXG4gICAgU0hPVzogJ3Nob3cnIC8vIGJzNFxufTtcbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCB2YXIgU0VMRUNUT1IgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgICBGSVhFRF9DT05URU5UOiAnLm5hdmJhci1maXhlZC10b3AsIC5uYXZiYXItZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQnXG59O1xuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OUyA9IHtcbiAgICBNT0RBTDogMzAwLFxuICAgIEJBQ0tEUk9QOiAxNTBcbn07XG4vKiogQHR5cGUgez99ICovXG5leHBvcnQgdmFyIERJU01JU1NfUkVBU09OUyA9IHtcbiAgICBCQUNLUkRPUDogJ2JhY2tkcm9wLWNsaWNrJyxcbiAgICBFU0M6ICdlc2MnXG59O1xuIl19