{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/alert/bundles/ngx-bootstrap-alert.umd.js"],"names":[],"mappings":"AAAA;4NACwK;sLACpB;;4DAEtG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8CzC;;;;yFAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyFA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiBkD;;;;;;;;;;;;;;;;;;;UAmBlD;;;;;;;;;;;;yKAQA","file":"ngx-bootstrap-alert.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/utils'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/alert', ['exports', '@angular/core', 'ngx-bootstrap/utils', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].alert = {}), global.ng.core, global.utils, global.ng.common));\n}(this, function (exports, core, utils, common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var AlertConfig = /** @class */ (function () {\n        function AlertConfig() {\n            /**\n             * default alert type\n             */\n            this.type = 'warning';\n            /**\n             * is alerts are dismissible by default\n             */\n            this.dismissible = false;\n            /**\n             * default time before alert will dismiss\n             */\n            this.dismissOnTimeout = undefined;\n        }\n        AlertConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return AlertConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var AlertComponent = /** @class */ (function () {\n        function AlertComponent(_config, changeDetection) {\n            var _this = this;\n            this.changeDetection = changeDetection;\n            /**\n             * Alert type.\n             * Provides one of four bootstrap supported contextual classes:\n             * `success`, `info`, `warning` and `danger`\n             */\n            this.type = 'warning';\n            /**\n             * If set, displays an inline \"Close\" button\n             */\n            this.dismissible = false;\n            /**\n             * Is alert visible\n             */\n            this.isOpen = true;\n            /**\n             * This event fires immediately after close instance method is called,\n             * $event is an instance of Alert component.\n             */\n            this.onClose = new core.EventEmitter();\n            /**\n             * This event fires when alert closed, $event is an instance of Alert component\n             */\n            this.onClosed = new core.EventEmitter();\n            this.classes = '';\n            this.dismissibleChange = new core.EventEmitter();\n            Object.assign(this, _config);\n            this.dismissibleChange.subscribe((/**\n             * @param {?} dismissible\n             * @return {?}\n             */\n            function (dismissible) {\n                _this.classes = _this.dismissible ? 'alert-dismissible' : '';\n                _this.changeDetection.markForCheck();\n            }));\n        }\n        /**\n         * @return {?}\n         */\n        AlertComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            if (this.dismissOnTimeout) {\n                // if dismissOnTimeout used as attr without binding, it will be a string\n                setTimeout((/**\n                 * @return {?}\n                 */\n                function () { return _this.close(); }), parseInt((/** @type {?} */ (this.dismissOnTimeout)), 10));\n            }\n        };\n        // todo: animation ` If the .fade and .in classes are present on the element,\n        // the alert will fade out before it is removed`\n        /**\n         * Closes an alert by removing it from the DOM.\n         */\n        // todo: animation ` If the .fade and .in classes are present on the element,\n        // the alert will fade out before it is removed`\n        /**\n         * Closes an alert by removing it from the DOM.\n         * @return {?}\n         */\n        AlertComponent.prototype.close = \n        // todo: animation ` If the .fade and .in classes are present on the element,\n        // the alert will fade out before it is removed`\n        /**\n         * Closes an alert by removing it from the DOM.\n         * @return {?}\n         */\n        function () {\n            if (!this.isOpen) {\n                return;\n            }\n            this.onClose.emit(this);\n            this.isOpen = false;\n            this.changeDetection.markForCheck();\n            this.onClosed.emit(this);\n        };\n        AlertComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'alert,bs-alert',\n                        template: \"<ng-template [ngIf]=\\\"isOpen\\\">\\n  <div [class]=\\\"'alert alert-' + type\\\" role=\\\"alert\\\" [ngClass]=\\\"classes\\\">\\n    <ng-template [ngIf]=\\\"dismissible\\\">\\n      <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"close()\\\">\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\n        <span class=\\\"sr-only\\\">Close</span>\\n      </button>\\n    </ng-template>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush\n                    }] }\n        ];\n        /** @nocollapse */\n        AlertComponent.ctorParameters = function () { return [\n            { type: AlertConfig },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        AlertComponent.propDecorators = {\n            type: [{ type: core.Input }],\n            dismissible: [{ type: core.Input }],\n            dismissOnTimeout: [{ type: core.Input }],\n            isOpen: [{ type: core.Input }],\n            onClose: [{ type: core.Output }],\n            onClosed: [{ type: core.Output }]\n        };\n        __decorate([\n            utils.OnChange(),\n            __metadata(\"design:type\", Object)\n        ], AlertComponent.prototype, \"dismissible\", void 0);\n        return AlertComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var AlertModule = /** @class */ (function () {\n        function AlertModule() {\n        }\n        /**\n         * @return {?}\n         */\n        AlertModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return { ngModule: AlertModule, providers: [AlertConfig] };\n        };\n        AlertModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [AlertComponent],\n                        exports: [AlertComponent],\n                        entryComponents: [AlertComponent]\n                    },] }\n        ];\n        return AlertModule;\n    }());\n\n    exports.AlertComponent = AlertComponent;\n    exports.AlertConfig = AlertConfig;\n    exports.AlertModule = AlertModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}