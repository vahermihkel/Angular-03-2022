{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/rating/bundles/ngx-bootstrap-rating.umd.js"],"names":[],"mappings":"AAAA;uNACmK;kLACnB;;4DAElG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+KxC,AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAaA;;;;;;;;;;;;;;;;;;;;;;UAsBA;;;;;;;;;;;4KAOA","file":"ngx-bootstrap-rating.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/rating', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].rating = {}), global.ng.core, global.ng.forms, global.ng.common));\n}(this, function (exports, core, forms, common) { 'use strict';\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var RATING_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        /* tslint:disable-next-line: no-use-before-declare */\n        useExisting: core.forwardRef((/**\n         * @return {?}\n         */\n        function () { return RatingComponent; })),\n        multi: true\n    };\n    var RatingComponent = /** @class */ (function () {\n        function RatingComponent(changeDetection) {\n            this.changeDetection = changeDetection;\n            /**\n             * number of icons\n             */\n            this.max = 5;\n            /**\n             * fired when icon selected, $event:number equals to selected rating\n             */\n            this.onHover = new core.EventEmitter();\n            /**\n             * fired when icon selected, $event:number equals to previous rating value\n             */\n            this.onLeave = new core.EventEmitter();\n            // tslint:disable-next-line:no-any\n            this.onChange = Function.prototype;\n            // tslint:disable-next-line:no-any\n            this.onTouched = Function.prototype;\n        }\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        RatingComponent.prototype.onKeydown = /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            /* tslint:disable-next-line: deprecation */\n            if ([37, 38, 39, 40].indexOf(event.which) === -1) {\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            /* tslint:disable-next-line: deprecation */\n            /** @type {?} */\n            var sign = event.which === 38 || event.which === 39 ? 1 : -1;\n            this.rate(this.value + sign);\n        };\n        /**\n         * @return {?}\n         */\n        RatingComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            this.max = typeof this.max !== 'undefined' ? this.max : 5;\n            this.titles =\n                typeof this.titles !== 'undefined' && this.titles.length > 0\n                    ? this.titles\n                    : [];\n            this.range = this.buildTemplateObjects(this.max);\n        };\n        // model -> view\n        // model -> view\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RatingComponent.prototype.writeValue = \n        // model -> view\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value % 1 !== value) {\n                this.value = Math.round(value);\n                this.preValue = value;\n                this.changeDetection.markForCheck();\n                return;\n            }\n            this.preValue = value;\n            this.value = value;\n            this.changeDetection.markForCheck();\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RatingComponent.prototype.enter = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (!this.readonly) {\n                this.value = value;\n                this.changeDetection.markForCheck();\n                this.onHover.emit(value);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        RatingComponent.prototype.reset = /**\n         * @return {?}\n         */\n        function () {\n            this.value = this.preValue;\n            this.changeDetection.markForCheck();\n            this.onLeave.emit(this.value);\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RatingComponent.prototype.registerOnChange = /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onChange = fn;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        RatingComponent.prototype.registerOnTouched = /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onTouched = fn;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        RatingComponent.prototype.rate = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (!this.readonly && value >= 0 && value <= this.range.length) {\n                this.writeValue(value);\n                this.onChange(value);\n            }\n        };\n        /**\n         * @protected\n         * @param {?} max\n         * @return {?}\n         */\n        RatingComponent.prototype.buildTemplateObjects = /**\n         * @protected\n         * @param {?} max\n         * @return {?}\n         */\n        function (max) {\n            /** @type {?} */\n            var result = [];\n            for (var i = 0; i < max; i++) {\n                result.push({\n                    index: i,\n                    title: this.titles[i] || i + 1\n                });\n            }\n            return result;\n        };\n        RatingComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'rating',\n                        template: \"<span (mouseleave)=\\\"reset()\\\" (keydown)=\\\"onKeydown($event)\\\" tabindex=\\\"0\\\"\\n      role=\\\"slider\\\" aria-valuemin=\\\"0\\\" [attr.aria-valuemax]=\\\"range.length\\\"\\n      [attr.aria-valuenow]=\\\"value\\\">\\n  <ng-template #star let-value=\\\"value\\\" let-index=\\\"index\\\">{{ index < value ? '&#9733;' : '&#9734;' }}</ng-template>\\n  <ng-template ngFor let-r [ngForOf]=\\\"range\\\" let-index=\\\"index\\\">\\n    <span class=\\\"sr-only\\\">({{ index < value ? '*' : ' ' }})</span>\\n    <span class=\\\"bs-rating-star\\\"\\n          (mouseenter)=\\\"enter(index + 1)\\\"\\n          (click)=\\\"rate(index + 1)\\\"\\n          [title]=\\\"r.title\\\"\\n          [style.cursor]=\\\"readonly ? 'default' : 'pointer'\\\"\\n          [class.active]=\\\"index < value\\\">\\n      <ng-template [ngTemplateOutlet]=\\\"customTemplate || star\\\"\\n                   [ngTemplateOutletContext]=\\\"{index: index, value: value}\\\">\\n      </ng-template>\\n    </span>\\n  </ng-template>\\n</span>\\n\",\n                        providers: [RATING_CONTROL_VALUE_ACCESSOR],\n                        changeDetection: core.ChangeDetectionStrategy.OnPush\n                    }] }\n        ];\n        /** @nocollapse */\n        RatingComponent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef }\n        ]; };\n        RatingComponent.propDecorators = {\n            max: [{ type: core.Input }],\n            readonly: [{ type: core.Input }],\n            titles: [{ type: core.Input }],\n            customTemplate: [{ type: core.Input }],\n            onHover: [{ type: core.Output }],\n            onLeave: [{ type: core.Output }],\n            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]\n        };\n        return RatingComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var RatingModule = /** @class */ (function () {\n        function RatingModule() {\n        }\n        /**\n         * @return {?}\n         */\n        RatingModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return {\n                ngModule: RatingModule,\n                providers: []\n            };\n        };\n        RatingModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [RatingComponent],\n                        exports: [RatingComponent]\n                    },] }\n        ];\n        return RatingModule;\n    }());\n\n    exports.RatingComponent = RatingComponent;\n    exports.RatingModule = RatingModule;\n    exports.Éµa = RATING_CONTROL_VALUE_ACCESSOR;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}