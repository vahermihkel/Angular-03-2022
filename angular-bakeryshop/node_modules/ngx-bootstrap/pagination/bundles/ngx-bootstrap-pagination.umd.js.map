{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/pagination/bundles/ngx-bootstrap-pagination.umd.js"],"names":[],"mappings":"AAAA;uNACmK;sLACf;;4DAEtG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8BzC;;;;6DAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+WA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+WA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAuBA;;;;;;;;;;;;;;;;;;;UAmBA;;;;;;;;;;;;;wLAOA","file":"ngx-bootstrap-pagination.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/pagination', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].pagination = {}), global.ng.core, global.ng.forms, global.ng.common));\n}(this, function (exports, core, forms, common) { 'use strict';\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * Provides default values for Pagination and pager components\n     */\n    var PaginationConfig = /** @class */ (function () {\n        function PaginationConfig() {\n            this.main = {\n                maxSize: void 0,\n                itemsPerPage: 10,\n                boundaryLinks: false,\n                directionLinks: true,\n                firstText: 'First',\n                previousText: 'Previous',\n                nextText: 'Next',\n                lastText: 'Last',\n                pageBtnClass: '',\n                rotate: true\n            };\n            this.pager = {\n                itemsPerPage: 15,\n                previousText: '« Previous',\n                nextText: 'Next »',\n                pageBtnClass: '',\n                align: true\n            };\n        }\n        PaginationConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return PaginationConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var PAGER_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        /* tslint:disable-next-line: no-use-before-declare */\n        useExisting: core.forwardRef((/**\n         * @return {?}\n         */\n        function () { return PagerComponent; })),\n        multi: true\n    };\n    var PagerComponent = /** @class */ (function () {\n        function PagerComponent(elementRef, paginationConfig, changeDetection) {\n            this.elementRef = elementRef;\n            this.changeDetection = changeDetection;\n            /**\n             * fired when total pages count changes, $event:number equals to total pages count\n             */\n            this.numPages = new core.EventEmitter();\n            /**\n             * fired when page was changed, $event:{page, itemsPerPage} equals to\n             * object with current page index and number of items per page\n             */\n            this.pageChanged = new core.EventEmitter();\n            this.onChange = Function.prototype;\n            this.onTouched = Function.prototype;\n            this.inited = false;\n            this._page = 1;\n            this.elementRef = elementRef;\n            if (!this.config) {\n                this.configureOptions(Object.assign({}, paginationConfig.main, paginationConfig.pager));\n            }\n        }\n        Object.defineProperty(PagerComponent.prototype, \"itemsPerPage\", {\n            /** maximum number of items per page. If value less than 1 will display all items on one page */\n            get: /**\n             * maximum number of items per page. If value less than 1 will display all items on one page\n             * @return {?}\n             */\n            function () {\n                return this._itemsPerPage;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._itemsPerPage = v;\n                this.totalPages = this.calculateTotalPages();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PagerComponent.prototype, \"totalItems\", {\n            /** total number of items in all pages */\n            get: /**\n             * total number of items in all pages\n             * @return {?}\n             */\n            function () {\n                return this._totalItems;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._totalItems = v;\n                this.totalPages = this.calculateTotalPages();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PagerComponent.prototype, \"totalPages\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._totalPages;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._totalPages = v;\n                this.numPages.emit(v);\n                if (this.inited) {\n                    this.selectPage(this.page);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PagerComponent.prototype, \"page\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._page;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                /** @type {?} */\n                var _previous = this._page;\n                this._page = value > this.totalPages ? this.totalPages : value || 1;\n                this.changeDetection.markForCheck();\n                if (_previous === this._page || typeof _previous === 'undefined') {\n                    return;\n                }\n                this.pageChanged.emit({\n                    page: this._page,\n                    itemsPerPage: this.itemsPerPage\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} config\n         * @return {?}\n         */\n        PagerComponent.prototype.configureOptions = /**\n         * @param {?} config\n         * @return {?}\n         */\n        function (config) {\n            this.config = Object.assign({}, config);\n        };\n        /**\n         * @return {?}\n         */\n        PagerComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            if (typeof window !== 'undefined') {\n                this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n            }\n            // watch for maxSize\n            this.maxSize =\n                typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n            this.rotate =\n                typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n            this.boundaryLinks =\n                typeof this.boundaryLinks !== 'undefined'\n                    ? this.boundaryLinks\n                    : this.config.boundaryLinks;\n            this.directionLinks =\n                typeof this.directionLinks !== 'undefined'\n                    ? this.directionLinks\n                    : this.config.directionLinks;\n            this.pageBtnClass =\n                typeof this.pageBtnClass !== 'undefined'\n                    ? this.pageBtnClass\n                    : this.config.pageBtnClass;\n            // base class\n            this.itemsPerPage =\n                typeof this.itemsPerPage !== 'undefined'\n                    ? this.itemsPerPage\n                    : this.config.itemsPerPage;\n            this.totalPages = this.calculateTotalPages();\n            // this class\n            this.pages = this.getPages(this.page, this.totalPages);\n            this.inited = true;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        PagerComponent.prototype.writeValue = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.page = value;\n            this.pages = this.getPages(this.page, this.totalPages);\n        };\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        PagerComponent.prototype.getText = /**\n         * @param {?} key\n         * @return {?}\n         */\n        function (key) {\n            // tslint:disable-next-line:no-any\n            return ((/** @type {?} */ (this)))[key + \"Text\"] || ((/** @type {?} */ (this))).config[key + \"Text\"];\n        };\n        /**\n         * @return {?}\n         */\n        PagerComponent.prototype.noPrevious = /**\n         * @return {?}\n         */\n        function () {\n            return this.page === 1;\n        };\n        /**\n         * @return {?}\n         */\n        PagerComponent.prototype.noNext = /**\n         * @return {?}\n         */\n        function () {\n            return this.page === this.totalPages;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PagerComponent.prototype.registerOnChange = /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onChange = fn;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PagerComponent.prototype.registerOnTouched = /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onTouched = fn;\n        };\n        /**\n         * @param {?} page\n         * @param {?=} event\n         * @return {?}\n         */\n        PagerComponent.prototype.selectPage = /**\n         * @param {?} page\n         * @param {?=} event\n         * @return {?}\n         */\n        function (page, event) {\n            if (event) {\n                event.preventDefault();\n            }\n            if (!this.disabled) {\n                if (event && event.target) {\n                    // tslint:disable-next-line:no-any\n                    /** @type {?} */\n                    var target = event.target;\n                    target.blur();\n                }\n                this.writeValue(page);\n                this.onChange(this.page);\n            }\n        };\n        // Create page object used in template\n        // Create page object used in template\n        /**\n         * @protected\n         * @param {?} num\n         * @param {?} text\n         * @param {?} active\n         * @return {?}\n         */\n        PagerComponent.prototype.makePage = \n        // Create page object used in template\n        /**\n         * @protected\n         * @param {?} num\n         * @param {?} text\n         * @param {?} active\n         * @return {?}\n         */\n        function (num, text, active) {\n            return { text: text, number: num, active: active };\n        };\n        /**\n         * @protected\n         * @param {?} currentPage\n         * @param {?} totalPages\n         * @return {?}\n         */\n        PagerComponent.prototype.getPages = /**\n         * @protected\n         * @param {?} currentPage\n         * @param {?} totalPages\n         * @return {?}\n         */\n        function (currentPage, totalPages) {\n            /** @type {?} */\n            var pages = [];\n            // Default page limits\n            /** @type {?} */\n            var startPage = 1;\n            /** @type {?} */\n            var endPage = totalPages;\n            /** @type {?} */\n            var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n            // recompute if maxSize\n            if (isMaxSized) {\n                if (this.rotate) {\n                    // Current page is displayed in the middle of the visible ones\n                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n                    endPage = startPage + this.maxSize - 1;\n                    // Adjust if limit is exceeded\n                    if (endPage > totalPages) {\n                        endPage = totalPages;\n                        startPage = endPage - this.maxSize + 1;\n                    }\n                }\n                else {\n                    // Visible pages are paginated with maxSize\n                    startPage =\n                        (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n                    // Adjust last page if limit is exceeded\n                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n                }\n            }\n            // Add page number links\n            for (var num = startPage; num <= endPage; num++) {\n                /** @type {?} */\n                var page = this.makePage(num, num.toString(), num === currentPage);\n                pages.push(page);\n            }\n            // Add links to move between page sets\n            if (isMaxSized && !this.rotate) {\n                if (startPage > 1) {\n                    /** @type {?} */\n                    var previousPageSet = this.makePage(startPage - 1, '...', false);\n                    pages.unshift(previousPageSet);\n                }\n                if (endPage < totalPages) {\n                    /** @type {?} */\n                    var nextPageSet = this.makePage(endPage + 1, '...', false);\n                    pages.push(nextPageSet);\n                }\n            }\n            return pages;\n        };\n        // base class\n        // base class\n        /**\n         * @protected\n         * @return {?}\n         */\n        PagerComponent.prototype.calculateTotalPages = \n        // base class\n        /**\n         * @protected\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var totalPages = this.itemsPerPage < 1\n                ? 1\n                : Math.ceil(this.totalItems / this.itemsPerPage);\n            return Math.max(totalPages || 0, 1);\n        };\n        PagerComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'pager',\n                        template: \"<ul class=\\\"pager\\\">\\n  <li [class.disabled]=\\\"noPrevious()\\\" [class.previous]=\\\"align\\\"\\n      [ngClass]=\\\"{'pull-right': align, 'float-right': align}\\\"\\n      class=\\\"{{ pageBtnClass }}\\\">\\n    <a href (click)=\\\"selectPage(page - 1, $event)\\\">{{ getText('previous') }}</a>\\n  </li>\\n  <li [class.disabled]=\\\"noNext()\\\" [class.next]=\\\"align\\\"\\n      [ngClass]=\\\"{'pull-right': align, 'float-right': align}\\\"\\n      class=\\\"{{ pageBtnClass }}\\\">\\n    <a href (click)=\\\"selectPage(page + 1, $event)\\\">{{ getText('next') }}</a>\\n  </li>\\n</ul>\\n\",\n                        providers: [PAGER_CONTROL_VALUE_ACCESSOR]\n                    }] }\n        ];\n        /** @nocollapse */\n        PagerComponent.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: PaginationConfig },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        PagerComponent.propDecorators = {\n            align: [{ type: core.Input }],\n            maxSize: [{ type: core.Input }],\n            boundaryLinks: [{ type: core.Input }],\n            directionLinks: [{ type: core.Input }],\n            firstText: [{ type: core.Input }],\n            previousText: [{ type: core.Input }],\n            nextText: [{ type: core.Input }],\n            lastText: [{ type: core.Input }],\n            rotate: [{ type: core.Input }],\n            pageBtnClass: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            numPages: [{ type: core.Output }],\n            pageChanged: [{ type: core.Output }],\n            itemsPerPage: [{ type: core.Input }],\n            totalItems: [{ type: core.Input }]\n        };\n        return PagerComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var PAGINATION_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        /* tslint:disable-next-line: no-use-before-declare */\n        useExisting: core.forwardRef((/**\n         * @return {?}\n         */\n        function () { return PaginationComponent; })),\n        multi: true\n    };\n    var PaginationComponent = /** @class */ (function () {\n        function PaginationComponent(elementRef, paginationConfig, changeDetection) {\n            this.elementRef = elementRef;\n            this.changeDetection = changeDetection;\n            /**\n             * fired when total pages count changes, $event:number equals to total pages count\n             */\n            this.numPages = new core.EventEmitter();\n            /**\n             * fired when page was changed, $event:{page, itemsPerPage} equals to object\n             * with current page index and number of items per page\n             */\n            this.pageChanged = new core.EventEmitter();\n            this.onChange = Function.prototype;\n            this.onTouched = Function.prototype;\n            this.inited = false;\n            this._page = 1;\n            this.elementRef = elementRef;\n            if (!this.config) {\n                this.configureOptions(paginationConfig.main);\n            }\n        }\n        Object.defineProperty(PaginationComponent.prototype, \"itemsPerPage\", {\n            /** maximum number of items per page. If value less than 1 will display all items on one page */\n            get: /**\n             * maximum number of items per page. If value less than 1 will display all items on one page\n             * @return {?}\n             */\n            function () {\n                return this._itemsPerPage;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._itemsPerPage = v;\n                this.totalPages = this.calculateTotalPages();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaginationComponent.prototype, \"totalItems\", {\n            /** total number of items in all pages */\n            get: /**\n             * total number of items in all pages\n             * @return {?}\n             */\n            function () {\n                return this._totalItems;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._totalItems = v;\n                this.totalPages = this.calculateTotalPages();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaginationComponent.prototype, \"totalPages\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._totalPages;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._totalPages = v;\n                this.numPages.emit(v);\n                if (this.inited) {\n                    this.selectPage(this.page);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PaginationComponent.prototype, \"page\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._page;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                /** @type {?} */\n                var _previous = this._page;\n                this._page = value > this.totalPages ? this.totalPages : value || 1;\n                this.changeDetection.markForCheck();\n                if (_previous === this._page || typeof _previous === 'undefined') {\n                    return;\n                }\n                this.pageChanged.emit({\n                    page: this._page,\n                    itemsPerPage: this.itemsPerPage\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} config\n         * @return {?}\n         */\n        PaginationComponent.prototype.configureOptions = /**\n         * @param {?} config\n         * @return {?}\n         */\n        function (config) {\n            this.config = Object.assign({}, config);\n        };\n        /**\n         * @return {?}\n         */\n        PaginationComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            if (typeof window !== 'undefined') {\n                this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n            }\n            // watch for maxSize\n            this.maxSize =\n                typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n            this.rotate =\n                typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n            this.boundaryLinks =\n                typeof this.boundaryLinks !== 'undefined'\n                    ? this.boundaryLinks\n                    : this.config.boundaryLinks;\n            this.directionLinks =\n                typeof this.directionLinks !== 'undefined'\n                    ? this.directionLinks\n                    : this.config.directionLinks;\n            this.pageBtnClass =\n                typeof this.pageBtnClass !== 'undefined'\n                    ? this.pageBtnClass\n                    : this.config.pageBtnClass;\n            // base class\n            this.itemsPerPage =\n                typeof this.itemsPerPage !== 'undefined'\n                    ? this.itemsPerPage\n                    : this.config.itemsPerPage;\n            this.totalPages = this.calculateTotalPages();\n            // this class\n            this.pages = this.getPages(this.page, this.totalPages);\n            this.inited = true;\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        PaginationComponent.prototype.writeValue = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this.page = value;\n            this.pages = this.getPages(this.page, this.totalPages);\n        };\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        PaginationComponent.prototype.getText = /**\n         * @param {?} key\n         * @return {?}\n         */\n        function (key) {\n            // tslint:disable-next-line:no-any\n            return ((/** @type {?} */ (this)))[key + \"Text\"] || ((/** @type {?} */ (this))).config[key + \"Text\"];\n        };\n        /**\n         * @return {?}\n         */\n        PaginationComponent.prototype.noPrevious = /**\n         * @return {?}\n         */\n        function () {\n            return this.page === 1;\n        };\n        /**\n         * @return {?}\n         */\n        PaginationComponent.prototype.noNext = /**\n         * @return {?}\n         */\n        function () {\n            return this.page === this.totalPages;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PaginationComponent.prototype.registerOnChange = /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onChange = fn;\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        PaginationComponent.prototype.registerOnTouched = /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onTouched = fn;\n        };\n        /**\n         * @param {?} page\n         * @param {?=} event\n         * @return {?}\n         */\n        PaginationComponent.prototype.selectPage = /**\n         * @param {?} page\n         * @param {?=} event\n         * @return {?}\n         */\n        function (page, event) {\n            if (event) {\n                event.preventDefault();\n            }\n            if (!this.disabled) {\n                if (event && event.target) {\n                    // tslint:disable-next-line:no-any\n                    /** @type {?} */\n                    var target = event.target;\n                    target.blur();\n                }\n                this.writeValue(page);\n                this.onChange(this.page);\n            }\n        };\n        // Create page object used in template\n        // Create page object used in template\n        /**\n         * @protected\n         * @param {?} num\n         * @param {?} text\n         * @param {?} active\n         * @return {?}\n         */\n        PaginationComponent.prototype.makePage = \n        // Create page object used in template\n        /**\n         * @protected\n         * @param {?} num\n         * @param {?} text\n         * @param {?} active\n         * @return {?}\n         */\n        function (num, text, active) {\n            return { text: text, number: num, active: active };\n        };\n        /**\n         * @protected\n         * @param {?} currentPage\n         * @param {?} totalPages\n         * @return {?}\n         */\n        PaginationComponent.prototype.getPages = /**\n         * @protected\n         * @param {?} currentPage\n         * @param {?} totalPages\n         * @return {?}\n         */\n        function (currentPage, totalPages) {\n            /** @type {?} */\n            var pages = [];\n            // Default page limits\n            /** @type {?} */\n            var startPage = 1;\n            /** @type {?} */\n            var endPage = totalPages;\n            /** @type {?} */\n            var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;\n            // recompute if maxSize\n            if (isMaxSized) {\n                if (this.rotate) {\n                    // Current page is displayed in the middle of the visible ones\n                    startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n                    endPage = startPage + this.maxSize - 1;\n                    // Adjust if limit is exceeded\n                    if (endPage > totalPages) {\n                        endPage = totalPages;\n                        startPage = endPage - this.maxSize + 1;\n                    }\n                }\n                else {\n                    // Visible pages are paginated with maxSize\n                    startPage =\n                        (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n                    // Adjust last page if limit is exceeded\n                    endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n                }\n            }\n            // Add page number links\n            for (var num = startPage; num <= endPage; num++) {\n                /** @type {?} */\n                var page = this.makePage(num, num.toString(), num === currentPage);\n                pages.push(page);\n            }\n            // Add links to move between page sets\n            if (isMaxSized && !this.rotate) {\n                if (startPage > 1) {\n                    /** @type {?} */\n                    var previousPageSet = this.makePage(startPage - 1, '...', false);\n                    pages.unshift(previousPageSet);\n                }\n                if (endPage < totalPages) {\n                    /** @type {?} */\n                    var nextPageSet = this.makePage(endPage + 1, '...', false);\n                    pages.push(nextPageSet);\n                }\n            }\n            return pages;\n        };\n        // base class\n        // base class\n        /**\n         * @protected\n         * @return {?}\n         */\n        PaginationComponent.prototype.calculateTotalPages = \n        // base class\n        /**\n         * @protected\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var totalPages = this.itemsPerPage < 1\n                ? 1\n                : Math.ceil(this.totalItems / this.itemsPerPage);\n            return Math.max(totalPages || 0, 1);\n        };\n        PaginationComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'pagination',\n                        template: \"<ul class=\\\"pagination\\\" [ngClass]=\\\"classMap\\\">\\n  <li class=\\\"pagination-first page-item\\\"\\n      *ngIf=\\\"boundaryLinks\\\"\\n      [class.disabled]=\\\"noPrevious()||disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(1, $event)\\\"\\n       [innerHTML]=\\\"getText('first')\\\"></a>\\n  </li>\\n\\n  <li class=\\\"pagination-prev page-item\\\"\\n      *ngIf=\\\"directionLinks\\\"\\n      [class.disabled]=\\\"noPrevious()||disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(page - 1, $event)\\\"\\n       [innerHTML]=\\\"getText('previous')\\\"></a>\\n  </li>\\n\\n  <li *ngFor=\\\"let pg of pages\\\"\\n      [class.active]=\\\"pg.active\\\"\\n      [class.disabled]=\\\"disabled&&!pg.active\\\"\\n      class=\\\"pagination-page page-item\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(pg.number, $event)\\\"\\n       [innerHTML]=\\\"pg.text\\\"></a>\\n  </li>\\n\\n  <li class=\\\"pagination-next page-item\\\"\\n      *ngIf=\\\"directionLinks\\\"\\n      [class.disabled]=\\\"noNext()||disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(page + 1, $event)\\\"\\n       [innerHTML]=\\\"getText('next')\\\"></a></li>\\n\\n  <li class=\\\"pagination-last page-item\\\"\\n      *ngIf=\\\"boundaryLinks\\\"\\n      [class.disabled]=\\\"noNext()||disabled\\\">\\n    <a class=\\\"page-link\\\" href (click)=\\\"selectPage(totalPages, $event)\\\"\\n       [innerHTML]=\\\"getText('last')\\\"></a></li>\\n</ul>\\n\",\n                        providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n                    }] }\n        ];\n        /** @nocollapse */\n        PaginationComponent.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: PaginationConfig },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        PaginationComponent.propDecorators = {\n            align: [{ type: core.Input }],\n            maxSize: [{ type: core.Input }],\n            boundaryLinks: [{ type: core.Input }],\n            directionLinks: [{ type: core.Input }],\n            firstText: [{ type: core.Input }],\n            previousText: [{ type: core.Input }],\n            nextText: [{ type: core.Input }],\n            lastText: [{ type: core.Input }],\n            rotate: [{ type: core.Input }],\n            pageBtnClass: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            numPages: [{ type: core.Output }],\n            pageChanged: [{ type: core.Output }],\n            itemsPerPage: [{ type: core.Input }],\n            totalItems: [{ type: core.Input }]\n        };\n        return PaginationComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var PaginationModule = /** @class */ (function () {\n        function PaginationModule() {\n        }\n        /**\n         * @return {?}\n         */\n        PaginationModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return { ngModule: PaginationModule, providers: [PaginationConfig] };\n        };\n        PaginationModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [PagerComponent, PaginationComponent],\n                        exports: [PagerComponent, PaginationComponent]\n                    },] }\n        ];\n        return PaginationModule;\n    }());\n\n    exports.PagerComponent = PagerComponent;\n    exports.PaginationComponent = PaginationComponent;\n    exports.PaginationConfig = PaginationConfig;\n    exports.PaginationModule = PaginationModule;\n    exports.ɵa = PAGER_CONTROL_VALUE_ACCESSOR;\n    exports.ɵb = PAGINATION_CONTROL_VALUE_ACCESSOR;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}