{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/sortable/fesm5/ngx-bootstrap-sortable.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsDM;;;;0IAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CA6SoC,AAiBpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAkBA;;;;;;;;;;;;;;;;;;;MAmBA;;;;;;;;;;;2KAOA","file":"ngx-bootstrap-sortable.js","sourcesContent":["import { Injectable, Component, forwardRef, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __spread } from 'tslib';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DraggableItemService = /** @class */ (function () {\n    function DraggableItemService() {\n        this.onCapture = new Subject();\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    DraggableItemService.prototype.dragStart = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        this.draggableItem = item;\n    };\n    /**\n     * @return {?}\n     */\n    DraggableItemService.prototype.getItem = /**\n     * @return {?}\n     */\n    function () {\n        return this.draggableItem;\n    };\n    /**\n     * @param {?} overZoneIndex\n     * @param {?} newIndex\n     * @return {?}\n     */\n    DraggableItemService.prototype.captureItem = /**\n     * @param {?} overZoneIndex\n     * @param {?} newIndex\n     * @return {?}\n     */\n    function (overZoneIndex, newIndex) {\n        if (this.draggableItem.overZoneIndex !== overZoneIndex) {\n            this.draggableItem.lastZoneIndex = this.draggableItem.overZoneIndex;\n            this.draggableItem.overZoneIndex = overZoneIndex;\n            this.onCapture.next(this.draggableItem);\n            this.draggableItem = Object.assign({}, this.draggableItem, {\n                overZoneIndex: overZoneIndex,\n                i: newIndex\n            });\n        }\n        return this.draggableItem;\n    };\n    /**\n     * @return {?}\n     */\n    DraggableItemService.prototype.onCaptureItem = /**\n     * @return {?}\n     */\n    function () {\n        return this.onCapture;\n    };\n    DraggableItemService.decorators = [\n        { type: Injectable }\n    ];\n    return DraggableItemService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\nvar SortableComponent = /** @class */ (function () {\n    function SortableComponent(transfer) {\n        var _this = this;\n        /**\n         * class name for items wrapper\n         */\n        this.wrapperClass = '';\n        /**\n         * style object for items wrapper\n         */\n        this.wrapperStyle = {};\n        /**\n         * class name for item\n         */\n        this.itemClass = '';\n        /**\n         * style object for item\n         */\n        this.itemStyle = {};\n        /**\n         * class name for active item\n         */\n        this.itemActiveClass = '';\n        /**\n         * style object for active item\n         */\n        this.itemActiveStyle = {};\n        /**\n         * class name for placeholder\n         */\n        this.placeholderClass = '';\n        /**\n         * style object for placeholder\n         */\n        this.placeholderStyle = {};\n        /**\n         * placeholder item which will be shown if collection is empty\n         */\n        this.placeholderItem = '';\n        /**\n         * fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n         *  Returns new items collection as a payload.\n         */\n        /* tslint:disable-next-line: no-any */\n        this.onChange = new EventEmitter();\n        this.showPlaceholder = false;\n        this.activeItem = -1;\n        /* tslint:disable-next-line: no-any */\n        this.onTouched = Function.prototype;\n        /* tslint:disable-next-line: no-any */\n        this.onChanged = Function.prototype;\n        this.transfer = transfer;\n        this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n        this.transfer\n            .onCaptureItem()\n            .subscribe((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) { return _this.onDrop(item); }));\n    }\n    Object.defineProperty(SortableComponent.prototype, \"items\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._items;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._items = value;\n            /** @type {?} */\n            var out = this.items.map((/**\n             * @param {?} x\n             * @return {?}\n             */\n            function (x) { return x.initData; }));\n            this.onChanged(out);\n            this.onChange.emit(out);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @param {?} item\n     * @param {?} i\n     * @return {?}\n     */\n    SortableComponent.prototype.onItemDragstart = /**\n     * @param {?} event\n     * @param {?} item\n     * @param {?} i\n     * @return {?}\n     */\n    function (event, item, i) {\n        this.initDragstartEvent(event);\n        this.onTouched();\n        this.transfer.dragStart({\n            event: event,\n            item: item,\n            i: i,\n            initialIndex: i,\n            lastZoneIndex: this.currentZoneIndex,\n            overZoneIndex: this.currentZoneIndex\n        });\n    };\n    /**\n     * @param {?} event\n     * @param {?} i\n     * @return {?}\n     */\n    SortableComponent.prototype.onItemDragover = /**\n     * @param {?} event\n     * @param {?} i\n     * @return {?}\n     */\n    function (event, i) {\n        if (!this.transfer.getItem()) {\n            return;\n        }\n        event.preventDefault();\n        /** @type {?} */\n        var dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n        /* tslint:disable-next-line: no-any */\n        /** @type {?} */\n        var newArray = [];\n        if (!this.items.length) {\n            newArray = [dragItem.item];\n        }\n        else if (dragItem.i > i) {\n            newArray = __spread(this.items.slice(0, i), [\n                dragItem.item\n            ], this.items.slice(i, dragItem.i), this.items.slice(dragItem.i + 1));\n        }\n        else {\n            // this.draggedItem.i < i\n            newArray = __spread(this.items.slice(0, dragItem.i), this.items.slice(dragItem.i + 1, i + 1), [\n                dragItem.item\n            ], this.items.slice(i + 1));\n        }\n        this.items = newArray;\n        dragItem.i = i;\n        this.activeItem = i;\n        this.updatePlaceholderState();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SortableComponent.prototype.cancelEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (!this.transfer.getItem() || !event) {\n            return;\n        }\n        event.preventDefault();\n    };\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    SortableComponent.prototype.onDrop = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        if (item &&\n            item.overZoneIndex !== this.currentZoneIndex &&\n            item.lastZoneIndex === this.currentZoneIndex) {\n            this.items = this.items.filter((/**\n             * @param {?} x\n             * @param {?} i\n             * @return {?}\n             */\n            function (x, i) { return i !== item.i; }));\n            this.updatePlaceholderState();\n        }\n        this.resetActiveItem(undefined);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    SortableComponent.prototype.resetActiveItem = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this.cancelEvent(event);\n        this.activeItem = -1;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    SortableComponent.prototype.registerOnChange = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        this.onChanged = callback;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    SortableComponent.prototype.registerOnTouched = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        this.onTouched = callback;\n    };\n    /* tslint:disable-next-line: no-any */\n    /* tslint:disable-next-line: no-any */\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SortableComponent.prototype.writeValue = /* tslint:disable-next-line: no-any */\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        if (value) {\n            /* tslint:disable-next-line: no-any */\n            this.items = value.map((/**\n             * @param {?} x\n             * @param {?} i\n             * @return {?}\n             */\n            function (x, i) { return ({\n                id: i,\n                initData: x,\n                value: _this.fieldName ? x[_this.fieldName] : x\n            }); }));\n        }\n        else {\n            this.items = [];\n        }\n        this.updatePlaceholderState();\n    };\n    /**\n     * @return {?}\n     */\n    SortableComponent.prototype.updatePlaceholderState = /**\n     * @return {?}\n     */\n    function () {\n        this.showPlaceholder = !this._items.length;\n    };\n    /**\n     * @param {?} isActive\n     * @return {?}\n     */\n    SortableComponent.prototype.getItemStyle = /**\n     * @param {?} isActive\n     * @return {?}\n     */\n    function (isActive) {\n        return isActive\n            ? Object.assign({}, this.itemStyle, this.itemActiveStyle)\n            : this.itemStyle;\n    };\n    // tslint:disable-next-line\n    // tslint:disable-next-line\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    SortableComponent.prototype.initDragstartEvent = \n    // tslint:disable-next-line\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // it is necessary for mozilla\n        // data type should be 'Text' instead of 'text/plain' to keep compatibility\n        // with IE\n        event.dataTransfer.setData('Text', 'placeholder');\n    };\n    SortableComponent.globalZoneIndex = 0;\n    SortableComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'bs-sortable',\n                    exportAs: 'bs-sortable',\n                    template: \"\\n<div\\n    [ngClass]=\\\"wrapperClass\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    (dragover)=\\\"cancelEvent($event)\\\"\\n    (dragenter)=\\\"cancelEvent($event)\\\"\\n    (drop)=\\\"resetActiveItem($event)\\\"\\n    (mouseleave)=\\\"resetActiveItem($event)\\\">\\n  <div\\n        *ngIf=\\\"showPlaceholder\\\"\\n        [ngClass]=\\\"placeholderClass\\\"\\n        [ngStyle]=\\\"placeholderStyle\\\"\\n        (dragover)=\\\"onItemDragover($event, 0)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n    >{{placeholderItem}}</div>\\n    <div\\n        *ngFor=\\\"let item of items; let i=index;\\\"\\n        [ngClass]=\\\"[ itemClass, i === activeItem ? itemActiveClass : '' ]\\\"\\n        [ngStyle]=\\\"getItemStyle(i === activeItem)\\\"\\n        draggable=\\\"true\\\"\\n        (dragstart)=\\\"onItemDragstart($event, item, i)\\\"\\n        (dragend)=\\\"resetActiveItem($event)\\\"\\n        (dragover)=\\\"onItemDragover($event, i)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n        aria-dropeffect=\\\"move\\\"\\n        [attr.aria-grabbed]=\\\"i === activeItem\\\"\\n    ><ng-template [ngTemplateOutlet]=\\\"itemTemplate || defItemTemplate\\\"\\n  [ngTemplateOutletContext]=\\\"{item:item, index: i}\\\"></ng-template></div>\\n</div>\\n\\n<ng-template #defItemTemplate let-item=\\\"item\\\">{{item.value}}</ng-template>  \\n\",\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef((/**\n                             * @return {?}\n                             */\n                            function () { return SortableComponent; })),\n                            multi: true\n                        }\n                    ]\n                }] }\n    ];\n    /** @nocollapse */\n    SortableComponent.ctorParameters = function () { return [\n        { type: DraggableItemService }\n    ]; };\n    SortableComponent.propDecorators = {\n        fieldName: [{ type: Input }],\n        wrapperClass: [{ type: Input }],\n        wrapperStyle: [{ type: Input }],\n        itemClass: [{ type: Input }],\n        itemStyle: [{ type: Input }],\n        itemActiveClass: [{ type: Input }],\n        itemActiveStyle: [{ type: Input }],\n        placeholderClass: [{ type: Input }],\n        placeholderStyle: [{ type: Input }],\n        placeholderItem: [{ type: Input }],\n        itemTemplate: [{ type: Input }],\n        onChange: [{ type: Output }]\n    };\n    return SortableComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar SortableModule = /** @class */ (function () {\n    function SortableModule() {\n    }\n    /**\n     * @return {?}\n     */\n    SortableModule.forRoot = /**\n     * @return {?}\n     */\n    function () {\n        return { ngModule: SortableModule, providers: [DraggableItemService] };\n    };\n    SortableModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [SortableComponent],\n                    imports: [CommonModule],\n                    exports: [SortableComponent]\n                },] }\n    ];\n    return SortableModule;\n}());\n\nexport { DraggableItemService, SortableComponent, SortableModule };\n"]}