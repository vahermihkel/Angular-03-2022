{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/sortable/bundles/ngx-bootstrap-sortable.umd.js"],"names":[],"mappings":"AAAA;wOACoL;4LAC1B;;kEAEtG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkG9C;;;;0IAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CA6SoC,AAiBpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAkBA;;;;;;;;;;;;;;;;;;;UAmBA;;;;;;;;;;;kLAOA","file":"ngx-bootstrap-sortable.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('rxjs')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/sortable', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'rxjs'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].sortable = {}), global.ng.core, global.ng.common, global.ng.forms, global.rxjs));\n}(this, function (exports, core, common, forms, rxjs) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var DraggableItemService = /** @class */ (function () {\n        function DraggableItemService() {\n            this.onCapture = new rxjs.Subject();\n        }\n        /**\n         * @param {?} item\n         * @return {?}\n         */\n        DraggableItemService.prototype.dragStart = /**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            this.draggableItem = item;\n        };\n        /**\n         * @return {?}\n         */\n        DraggableItemService.prototype.getItem = /**\n         * @return {?}\n         */\n        function () {\n            return this.draggableItem;\n        };\n        /**\n         * @param {?} overZoneIndex\n         * @param {?} newIndex\n         * @return {?}\n         */\n        DraggableItemService.prototype.captureItem = /**\n         * @param {?} overZoneIndex\n         * @param {?} newIndex\n         * @return {?}\n         */\n        function (overZoneIndex, newIndex) {\n            if (this.draggableItem.overZoneIndex !== overZoneIndex) {\n                this.draggableItem.lastZoneIndex = this.draggableItem.overZoneIndex;\n                this.draggableItem.overZoneIndex = overZoneIndex;\n                this.onCapture.next(this.draggableItem);\n                this.draggableItem = Object.assign({}, this.draggableItem, {\n                    overZoneIndex: overZoneIndex,\n                    i: newIndex\n                });\n            }\n            return this.draggableItem;\n        };\n        /**\n         * @return {?}\n         */\n        DraggableItemService.prototype.onCaptureItem = /**\n         * @return {?}\n         */\n        function () {\n            return this.onCapture;\n        };\n        DraggableItemService.decorators = [\n            { type: core.Injectable }\n        ];\n        return DraggableItemService;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /* tslint:disable */\n    var SortableComponent = /** @class */ (function () {\n        function SortableComponent(transfer) {\n            var _this = this;\n            /**\n             * class name for items wrapper\n             */\n            this.wrapperClass = '';\n            /**\n             * style object for items wrapper\n             */\n            this.wrapperStyle = {};\n            /**\n             * class name for item\n             */\n            this.itemClass = '';\n            /**\n             * style object for item\n             */\n            this.itemStyle = {};\n            /**\n             * class name for active item\n             */\n            this.itemActiveClass = '';\n            /**\n             * style object for active item\n             */\n            this.itemActiveStyle = {};\n            /**\n             * class name for placeholder\n             */\n            this.placeholderClass = '';\n            /**\n             * style object for placeholder\n             */\n            this.placeholderStyle = {};\n            /**\n             * placeholder item which will be shown if collection is empty\n             */\n            this.placeholderItem = '';\n            /**\n             * fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n             *  Returns new items collection as a payload.\n             */\n            /* tslint:disable-next-line: no-any */\n            this.onChange = new core.EventEmitter();\n            this.showPlaceholder = false;\n            this.activeItem = -1;\n            /* tslint:disable-next-line: no-any */\n            this.onTouched = Function.prototype;\n            /* tslint:disable-next-line: no-any */\n            this.onChanged = Function.prototype;\n            this.transfer = transfer;\n            this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n            this.transfer\n                .onCaptureItem()\n                .subscribe((/**\n             * @param {?} item\n             * @return {?}\n             */\n            function (item) { return _this.onDrop(item); }));\n        }\n        Object.defineProperty(SortableComponent.prototype, \"items\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._items;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this._items = value;\n                /** @type {?} */\n                var out = this.items.map((/**\n                 * @param {?} x\n                 * @return {?}\n                 */\n                function (x) { return x.initData; }));\n                this.onChanged(out);\n                this.onChange.emit(out);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} event\n         * @param {?} item\n         * @param {?} i\n         * @return {?}\n         */\n        SortableComponent.prototype.onItemDragstart = /**\n         * @param {?} event\n         * @param {?} item\n         * @param {?} i\n         * @return {?}\n         */\n        function (event, item, i) {\n            this.initDragstartEvent(event);\n            this.onTouched();\n            this.transfer.dragStart({\n                event: event,\n                item: item,\n                i: i,\n                initialIndex: i,\n                lastZoneIndex: this.currentZoneIndex,\n                overZoneIndex: this.currentZoneIndex\n            });\n        };\n        /**\n         * @param {?} event\n         * @param {?} i\n         * @return {?}\n         */\n        SortableComponent.prototype.onItemDragover = /**\n         * @param {?} event\n         * @param {?} i\n         * @return {?}\n         */\n        function (event, i) {\n            if (!this.transfer.getItem()) {\n                return;\n            }\n            event.preventDefault();\n            /** @type {?} */\n            var dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n            /* tslint:disable-next-line: no-any */\n            /** @type {?} */\n            var newArray = [];\n            if (!this.items.length) {\n                newArray = [dragItem.item];\n            }\n            else if (dragItem.i > i) {\n                newArray = __spread(this.items.slice(0, i), [\n                    dragItem.item\n                ], this.items.slice(i, dragItem.i), this.items.slice(dragItem.i + 1));\n            }\n            else {\n                // this.draggedItem.i < i\n                newArray = __spread(this.items.slice(0, dragItem.i), this.items.slice(dragItem.i + 1, i + 1), [\n                    dragItem.item\n                ], this.items.slice(i + 1));\n            }\n            this.items = newArray;\n            dragItem.i = i;\n            this.activeItem = i;\n            this.updatePlaceholderState();\n        };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        SortableComponent.prototype.cancelEvent = /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (!this.transfer.getItem() || !event) {\n                return;\n            }\n            event.preventDefault();\n        };\n        /**\n         * @param {?} item\n         * @return {?}\n         */\n        SortableComponent.prototype.onDrop = /**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            if (item &&\n                item.overZoneIndex !== this.currentZoneIndex &&\n                item.lastZoneIndex === this.currentZoneIndex) {\n                this.items = this.items.filter((/**\n                 * @param {?} x\n                 * @param {?} i\n                 * @return {?}\n                 */\n                function (x, i) { return i !== item.i; }));\n                this.updatePlaceholderState();\n            }\n            this.resetActiveItem(undefined);\n        };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        SortableComponent.prototype.resetActiveItem = /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            this.cancelEvent(event);\n            this.activeItem = -1;\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        SortableComponent.prototype.registerOnChange = /**\n         * @param {?} callback\n         * @return {?}\n         */\n        function (callback) {\n            this.onChanged = callback;\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        SortableComponent.prototype.registerOnTouched = /**\n         * @param {?} callback\n         * @return {?}\n         */\n        function (callback) {\n            this.onTouched = callback;\n        };\n        /* tslint:disable-next-line: no-any */\n        /* tslint:disable-next-line: no-any */\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SortableComponent.prototype.writeValue = /* tslint:disable-next-line: no-any */\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (value) {\n                /* tslint:disable-next-line: no-any */\n                this.items = value.map((/**\n                 * @param {?} x\n                 * @param {?} i\n                 * @return {?}\n                 */\n                function (x, i) { return ({\n                    id: i,\n                    initData: x,\n                    value: _this.fieldName ? x[_this.fieldName] : x\n                }); }));\n            }\n            else {\n                this.items = [];\n            }\n            this.updatePlaceholderState();\n        };\n        /**\n         * @return {?}\n         */\n        SortableComponent.prototype.updatePlaceholderState = /**\n         * @return {?}\n         */\n        function () {\n            this.showPlaceholder = !this._items.length;\n        };\n        /**\n         * @param {?} isActive\n         * @return {?}\n         */\n        SortableComponent.prototype.getItemStyle = /**\n         * @param {?} isActive\n         * @return {?}\n         */\n        function (isActive) {\n            return isActive\n                ? Object.assign({}, this.itemStyle, this.itemActiveStyle)\n                : this.itemStyle;\n        };\n        // tslint:disable-next-line\n        // tslint:disable-next-line\n        /**\n         * @private\n         * @param {?} event\n         * @return {?}\n         */\n        SortableComponent.prototype.initDragstartEvent = \n        // tslint:disable-next-line\n        /**\n         * @private\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            // it is necessary for mozilla\n            // data type should be 'Text' instead of 'text/plain' to keep compatibility\n            // with IE\n            event.dataTransfer.setData('Text', 'placeholder');\n        };\n        SortableComponent.globalZoneIndex = 0;\n        SortableComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'bs-sortable',\n                        exportAs: 'bs-sortable',\n                        template: \"\\n<div\\n    [ngClass]=\\\"wrapperClass\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    [ngStyle]=\\\"wrapperStyle\\\"\\n    (dragover)=\\\"cancelEvent($event)\\\"\\n    (dragenter)=\\\"cancelEvent($event)\\\"\\n    (drop)=\\\"resetActiveItem($event)\\\"\\n    (mouseleave)=\\\"resetActiveItem($event)\\\">\\n  <div\\n        *ngIf=\\\"showPlaceholder\\\"\\n        [ngClass]=\\\"placeholderClass\\\"\\n        [ngStyle]=\\\"placeholderStyle\\\"\\n        (dragover)=\\\"onItemDragover($event, 0)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n    >{{placeholderItem}}</div>\\n    <div\\n        *ngFor=\\\"let item of items; let i=index;\\\"\\n        [ngClass]=\\\"[ itemClass, i === activeItem ? itemActiveClass : '' ]\\\"\\n        [ngStyle]=\\\"getItemStyle(i === activeItem)\\\"\\n        draggable=\\\"true\\\"\\n        (dragstart)=\\\"onItemDragstart($event, item, i)\\\"\\n        (dragend)=\\\"resetActiveItem($event)\\\"\\n        (dragover)=\\\"onItemDragover($event, i)\\\"\\n        (dragenter)=\\\"cancelEvent($event)\\\"\\n        aria-dropeffect=\\\"move\\\"\\n        [attr.aria-grabbed]=\\\"i === activeItem\\\"\\n    ><ng-template [ngTemplateOutlet]=\\\"itemTemplate || defItemTemplate\\\"\\n  [ngTemplateOutletContext]=\\\"{item:item, index: i}\\\"></ng-template></div>\\n</div>\\n\\n<ng-template #defItemTemplate let-item=\\\"item\\\">{{item.value}}</ng-template>  \\n\",\n                        providers: [\n                            {\n                                provide: forms.NG_VALUE_ACCESSOR,\n                                useExisting: core.forwardRef((/**\n                                 * @return {?}\n                                 */\n                                function () { return SortableComponent; })),\n                                multi: true\n                            }\n                        ]\n                    }] }\n        ];\n        /** @nocollapse */\n        SortableComponent.ctorParameters = function () { return [\n            { type: DraggableItemService }\n        ]; };\n        SortableComponent.propDecorators = {\n            fieldName: [{ type: core.Input }],\n            wrapperClass: [{ type: core.Input }],\n            wrapperStyle: [{ type: core.Input }],\n            itemClass: [{ type: core.Input }],\n            itemStyle: [{ type: core.Input }],\n            itemActiveClass: [{ type: core.Input }],\n            itemActiveStyle: [{ type: core.Input }],\n            placeholderClass: [{ type: core.Input }],\n            placeholderStyle: [{ type: core.Input }],\n            placeholderItem: [{ type: core.Input }],\n            itemTemplate: [{ type: core.Input }],\n            onChange: [{ type: core.Output }]\n        };\n        return SortableComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var SortableModule = /** @class */ (function () {\n        function SortableModule() {\n        }\n        /**\n         * @return {?}\n         */\n        SortableModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return { ngModule: SortableModule, providers: [DraggableItemService] };\n        };\n        SortableModule.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [SortableComponent],\n                        imports: [common.CommonModule],\n                        exports: [SortableComponent]\n                    },] }\n        ];\n        return SortableModule;\n    }());\n\n    exports.DraggableItemService = DraggableItemService;\n    exports.SortableComponent = SortableComponent;\n    exports.SortableModule = SortableModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}