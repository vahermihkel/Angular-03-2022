{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/timepicker/bundles/ngx-bootstrap-timepicker.umd.js"],"names":[],"mappings":"AAAA;4QACwN;yNACjC;;4EAEzH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2EA+HS;;;;gJAGjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA0cD;;;;4OAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAqHD,AAGC;;;;;;0CAE0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA+a1D,AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAwBA;;;;;;;;;;;;;;;;;;;;;;UAsBA;;;;;;;;;;;wLAOA","file":"ngx-bootstrap-timepicker.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('rxjs'), require('ngx-bootstrap/mini-ngrx'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/timepicker', ['exports', '@angular/core', '@angular/forms', 'rxjs', 'ngx-bootstrap/mini-ngrx', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].timepicker = {}), global.ng.core, global.ng.forms, global.rxjs, global.miniNgrx, global.ng.common));\n}(this, function (exports, core, forms, rxjs, miniNgrx, common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var TimepickerActions = /** @class */ (function () {\n        function TimepickerActions() {\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        TimepickerActions.prototype.writeValue = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            return {\n                type: TimepickerActions.WRITE_VALUE,\n                payload: value\n            };\n        };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        TimepickerActions.prototype.changeHours = /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            return {\n                type: TimepickerActions.CHANGE_HOURS,\n                payload: event\n            };\n        };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        TimepickerActions.prototype.changeMinutes = /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            return {\n                type: TimepickerActions.CHANGE_MINUTES,\n                payload: event\n            };\n        };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        TimepickerActions.prototype.changeSeconds = /**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            return {\n                type: TimepickerActions.CHANGE_SECONDS,\n                payload: event\n            };\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        TimepickerActions.prototype.setTime = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            return {\n                type: TimepickerActions.SET_TIME_UNIT,\n                payload: value\n            };\n        };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        TimepickerActions.prototype.updateControls = /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            return {\n                type: TimepickerActions.UPDATE_CONTROLS,\n                payload: value\n            };\n        };\n        TimepickerActions.WRITE_VALUE = '[timepicker] write value from ng model';\n        TimepickerActions.CHANGE_HOURS = '[timepicker] change hours';\n        TimepickerActions.CHANGE_MINUTES = '[timepicker] change minutes';\n        TimepickerActions.CHANGE_SECONDS = '[timepicker] change seconds';\n        TimepickerActions.SET_TIME_UNIT = '[timepicker] set time unit';\n        TimepickerActions.UPDATE_CONTROLS = '[timepicker] update controls';\n        TimepickerActions.decorators = [\n            { type: core.Injectable }\n        ];\n        return TimepickerActions;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var dex = 10;\n    /** @type {?} */\n    var hoursPerDay = 24;\n    /** @type {?} */\n    var hoursPerDayHalf = 12;\n    /** @type {?} */\n    var minutesPerHour = 60;\n    /** @type {?} */\n    var secondsPerMinute = 60;\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function isValidDate(value) {\n        if (!value) {\n            return false;\n        }\n        if (value instanceof Date && isNaN(value.getHours())) {\n            return false;\n        }\n        if (typeof value === 'string') {\n            return isValidDate(new Date(value));\n        }\n        return true;\n    }\n    /**\n     * @param {?} controls\n     * @param {?} newDate\n     * @return {?}\n     */\n    function isValidLimit(controls, newDate) {\n        if (controls.min && newDate < controls.min) {\n            return false;\n        }\n        if (controls.max && newDate > controls.max) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function toNumber(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        return parseInt(value, dex);\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isPM\n     * @return {?}\n     */\n    function parseHours(value, isPM) {\n        if (isPM === void 0) { isPM = false; }\n        /** @type {?} */\n        var hour = toNumber(value);\n        if (isNaN(hour) ||\n            hour < 0 ||\n            hour > (isPM ? hoursPerDayHalf : hoursPerDay)) {\n            return NaN;\n        }\n        return hour;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function parseMinutes(value) {\n        /** @type {?} */\n        var minute = toNumber(value);\n        if (isNaN(minute) || minute < 0 || minute > minutesPerHour) {\n            return NaN;\n        }\n        return minute;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function parseSeconds(value) {\n        /** @type {?} */\n        var seconds = toNumber(value);\n        if (isNaN(seconds) || seconds < 0 || seconds > secondsPerMinute) {\n            return NaN;\n        }\n        return seconds;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function parseTime(value) {\n        if (typeof value === 'string') {\n            return new Date(value);\n        }\n        return value;\n    }\n    /**\n     * @param {?} value\n     * @param {?} diff\n     * @return {?}\n     */\n    function changeTime(value, diff) {\n        if (!value) {\n            return changeTime(createDate(new Date(), 0, 0, 0), diff);\n        }\n        /** @type {?} */\n        var hour = value.getHours();\n        /** @type {?} */\n        var minutes = value.getMinutes();\n        /** @type {?} */\n        var seconds = value.getSeconds();\n        if (diff.hour) {\n            hour = (hour + toNumber(diff.hour)) % hoursPerDay;\n            if (hour < 0) {\n                hour += hoursPerDay;\n            }\n        }\n        if (diff.minute) {\n            minutes = minutes + toNumber(diff.minute);\n        }\n        if (diff.seconds) {\n            seconds = seconds + toNumber(diff.seconds);\n        }\n        return createDate(value, hour, minutes, seconds);\n    }\n    /**\n     * @param {?} value\n     * @param {?} opts\n     * @return {?}\n     */\n    function setTime(value, opts) {\n        /** @type {?} */\n        var hour = parseHours(opts.hour);\n        /** @type {?} */\n        var minute = parseMinutes(opts.minute);\n        /** @type {?} */\n        var seconds = parseSeconds(opts.seconds) || 0;\n        if (opts.isPM && hour !== 12) {\n            hour += hoursPerDayHalf;\n        }\n        if (!value) {\n            if (!isNaN(hour) && !isNaN(minute)) {\n                return createDate(new Date(), hour, minute, seconds);\n            }\n            return value;\n        }\n        if (isNaN(hour) || isNaN(minute)) {\n            return value;\n        }\n        return createDate(value, hour, minute, seconds);\n    }\n    /**\n     * @param {?} value\n     * @param {?} hours\n     * @param {?} minutes\n     * @param {?} seconds\n     * @return {?}\n     */\n    function createDate(value, hours, minutes, seconds) {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, value.getMilliseconds());\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function padNumber(value) {\n        /** @type {?} */\n        var _value = value.toString();\n        if (_value.length > 1) {\n            return _value;\n        }\n        return \"0\" + _value;\n    }\n    /**\n     * @param {?} hours\n     * @param {?} isPM\n     * @return {?}\n     */\n    function isHourInputValid(hours, isPM) {\n        return !isNaN(parseHours(hours, isPM));\n    }\n    /**\n     * @param {?} minutes\n     * @return {?}\n     */\n    function isMinuteInputValid(minutes) {\n        return !isNaN(parseMinutes(minutes));\n    }\n    /**\n     * @param {?} seconds\n     * @return {?}\n     */\n    function isSecondInputValid(seconds) {\n        return !isNaN(parseSeconds(seconds));\n    }\n    /**\n     * @param {?} diff\n     * @param {?} max\n     * @param {?} min\n     * @return {?}\n     */\n    function isInputLimitValid(diff, max, min) {\n        /** @type {?} */\n        var newDate = setTime(new Date(), diff);\n        if (max && newDate > max) {\n            return false;\n        }\n        if (min && newDate < min) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} hours\n     * @param {?=} minutes\n     * @param {?=} seconds\n     * @param {?=} isPM\n     * @return {?}\n     */\n    function isInputValid(hours, minutes, seconds, isPM) {\n        if (minutes === void 0) { minutes = '0'; }\n        if (seconds === void 0) { seconds = '0'; }\n        return isHourInputValid(hours, isPM)\n            && isMinuteInputValid(minutes)\n            && isSecondInputValid(seconds);\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * @param {?} state\n     * @param {?=} event\n     * @return {?}\n     */\n    function canChangeValue(state, event) {\n        if (state.readonlyInput || state.disabled) {\n            return false;\n        }\n        if (event) {\n            if (event.source === 'wheel' && !state.mousewheel) {\n                return false;\n            }\n            if (event.source === 'key' && !state.arrowkeys) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * @param {?} event\n     * @param {?} controls\n     * @return {?}\n     */\n    function canChangeHours(event, controls) {\n        if (!event.step) {\n            return false;\n        }\n        if (event.step > 0 && !controls.canIncrementHours) {\n            return false;\n        }\n        if (event.step < 0 && !controls.canDecrementHours) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} event\n     * @param {?} controls\n     * @return {?}\n     */\n    function canChangeMinutes(event, controls) {\n        if (!event.step) {\n            return false;\n        }\n        if (event.step > 0 && !controls.canIncrementMinutes) {\n            return false;\n        }\n        if (event.step < 0 && !controls.canDecrementMinutes) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} event\n     * @param {?} controls\n     * @return {?}\n     */\n    function canChangeSeconds(event, controls) {\n        if (!event.step) {\n            return false;\n        }\n        if (event.step > 0 && !controls.canIncrementSeconds) {\n            return false;\n        }\n        if (event.step < 0 && !controls.canDecrementSeconds) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    function getControlsValue(state) {\n        var hourStep = state.hourStep, minuteStep = state.minuteStep, secondsStep = state.secondsStep, readonlyInput = state.readonlyInput, disabled = state.disabled, mousewheel = state.mousewheel, arrowkeys = state.arrowkeys, showSpinners = state.showSpinners, showMeridian = state.showMeridian, showSeconds = state.showSeconds, meridians = state.meridians, min = state.min, max = state.max;\n        return {\n            hourStep: hourStep,\n            minuteStep: minuteStep,\n            secondsStep: secondsStep,\n            readonlyInput: readonlyInput,\n            disabled: disabled,\n            mousewheel: mousewheel,\n            arrowkeys: arrowkeys,\n            showSpinners: showSpinners,\n            showMeridian: showMeridian,\n            showSeconds: showSeconds,\n            meridians: meridians,\n            min: min,\n            max: max\n        };\n    }\n    /**\n     * @param {?} value\n     * @param {?} state\n     * @return {?}\n     */\n    function timepickerControls(value, state) {\n        /** @type {?} */\n        var hoursPerDayHalf = 12;\n        var min = state.min, max = state.max, hourStep = state.hourStep, minuteStep = state.minuteStep, secondsStep = state.secondsStep, showSeconds = state.showSeconds;\n        /** @type {?} */\n        var res = {\n            canIncrementHours: true,\n            canIncrementMinutes: true,\n            canIncrementSeconds: true,\n            canDecrementHours: true,\n            canDecrementMinutes: true,\n            canDecrementSeconds: true,\n            canToggleMeridian: true\n        };\n        if (!value) {\n            return res;\n        }\n        // compare dates\n        if (max) {\n            /** @type {?} */\n            var _newHour = changeTime(value, { hour: hourStep });\n            res.canIncrementHours = max > _newHour;\n            if (!res.canIncrementHours) {\n                /** @type {?} */\n                var _newMinutes = changeTime(value, { minute: minuteStep });\n                res.canIncrementMinutes = showSeconds\n                    ? max > _newMinutes\n                    : max >= _newMinutes;\n            }\n            if (!res.canIncrementMinutes) {\n                /** @type {?} */\n                var _newSeconds = changeTime(value, { seconds: secondsStep });\n                res.canIncrementSeconds = max >= _newSeconds;\n            }\n            if (value.getHours() < hoursPerDayHalf) {\n                res.canToggleMeridian = changeTime(value, { hour: hoursPerDayHalf }) < max;\n            }\n        }\n        if (min) {\n            /** @type {?} */\n            var _newHour = changeTime(value, { hour: -hourStep });\n            res.canDecrementHours = min < _newHour;\n            if (!res.canDecrementHours) {\n                /** @type {?} */\n                var _newMinutes = changeTime(value, { minute: -minuteStep });\n                res.canDecrementMinutes = showSeconds\n                    ? min < _newMinutes\n                    : min <= _newMinutes;\n            }\n            if (!res.canDecrementMinutes) {\n                /** @type {?} */\n                var _newSeconds = changeTime(value, { seconds: -secondsStep });\n                res.canDecrementSeconds = min <= _newSeconds;\n            }\n            if (value.getHours() >= hoursPerDayHalf) {\n                res.canToggleMeridian = changeTime(value, { hour: -hoursPerDayHalf }) > min;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * Provides default configuration values for timepicker\n     */\n    var TimepickerConfig = /** @class */ (function () {\n        function TimepickerConfig() {\n            /**\n             * hours change step\n             */\n            this.hourStep = 1;\n            /**\n             * hours change step\n             */\n            this.minuteStep = 5;\n            /**\n             * seconds changes step\n             */\n            this.secondsStep = 10;\n            /**\n             * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM\n             */\n            this.showMeridian = true;\n            /**\n             * meridian labels based on locale\n             */\n            this.meridians = ['AM', 'PM'];\n            /**\n             * if true hours and minutes fields will be readonly\n             */\n            this.readonlyInput = false;\n            /**\n             * if true hours and minutes fields will be disabled\n             */\n            this.disabled = false;\n            /**\n             * if true scroll inside hours and minutes inputs will change time\n             */\n            this.mousewheel = true;\n            /**\n             * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard\n             */\n            this.arrowkeys = true;\n            /**\n             * if true spinner arrows above and below the inputs will be shown\n             */\n            this.showSpinners = true;\n            /**\n             * show seconds in timepicker\n             */\n            this.showSeconds = false;\n            /**\n             * show minutes in timepicker\n             */\n            this.showMinutes = true;\n        }\n        TimepickerConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return TimepickerConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var initialState = {\n        value: null,\n        config: new TimepickerConfig(),\n        controls: {\n            canIncrementHours: true,\n            canIncrementMinutes: true,\n            canIncrementSeconds: true,\n            canDecrementHours: true,\n            canDecrementMinutes: true,\n            canDecrementSeconds: true,\n            canToggleMeridian: true\n        }\n    };\n    // tslint:disable-next-line:cyclomatic-complexity\n    /**\n     * @param {?=} state\n     * @param {?=} action\n     * @return {?}\n     */\n    function timepickerReducer(state, action) {\n        if (state === void 0) { state = initialState; }\n        switch (action.type) {\n            case TimepickerActions.WRITE_VALUE: {\n                return Object.assign({}, state, { value: action.payload });\n            }\n            case TimepickerActions.CHANGE_HOURS: {\n                if (!canChangeValue(state.config, action.payload) ||\n                    !canChangeHours(action.payload, state.controls)) {\n                    return state;\n                }\n                /** @type {?} */\n                var _newTime = changeTime(state.value, { hour: action.payload.step });\n                if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n                    return state;\n                }\n                return Object.assign({}, state, { value: _newTime });\n            }\n            case TimepickerActions.CHANGE_MINUTES: {\n                if (!canChangeValue(state.config, action.payload) ||\n                    !canChangeMinutes(action.payload, state.controls)) {\n                    return state;\n                }\n                /** @type {?} */\n                var _newTime = changeTime(state.value, { minute: action.payload.step });\n                if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n                    return state;\n                }\n                return Object.assign({}, state, { value: _newTime });\n            }\n            case TimepickerActions.CHANGE_SECONDS: {\n                if (!canChangeValue(state.config, action.payload) ||\n                    !canChangeSeconds(action.payload, state.controls)) {\n                    return state;\n                }\n                /** @type {?} */\n                var _newTime = changeTime(state.value, {\n                    seconds: action.payload.step\n                });\n                if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n                    return state;\n                }\n                return Object.assign({}, state, { value: _newTime });\n            }\n            case TimepickerActions.SET_TIME_UNIT: {\n                if (!canChangeValue(state.config)) {\n                    return state;\n                }\n                /** @type {?} */\n                var _newTime = setTime(state.value, action.payload);\n                return Object.assign({}, state, { value: _newTime });\n            }\n            case TimepickerActions.UPDATE_CONTROLS: {\n                /** @type {?} */\n                var _newControlsState = timepickerControls(state.value, action.payload);\n                /** @type {?} */\n                var _newState = {\n                    value: state.value,\n                    config: action.payload,\n                    controls: _newControlsState\n                };\n                if (state.config.showMeridian !== _newState.config.showMeridian) {\n                    if (state.value) {\n                        _newState.value = new Date(state.value);\n                    }\n                }\n                return Object.assign({}, state, _newState);\n            }\n            default:\n                return state;\n        }\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var TimepickerStore = /** @class */ (function (_super) {\n        __extends(TimepickerStore, _super);\n        function TimepickerStore() {\n            var _this = this;\n            /** @type {?} */\n            var _dispatcher = new rxjs.BehaviorSubject({\n                type: '[mini-ngrx] dispatcher init'\n            });\n            /** @type {?} */\n            var state = new miniNgrx.MiniState(initialState, _dispatcher, timepickerReducer);\n            _this = _super.call(this, _dispatcher, timepickerReducer, state) || this;\n            return _this;\n        }\n        TimepickerStore.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        TimepickerStore.ctorParameters = function () { return []; };\n        return TimepickerStore;\n    }(miniNgrx.MiniStore));\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var TIMEPICKER_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        /* tslint:disable-next-line: no-use-before-declare */\n        useExisting: core.forwardRef((/**\n         * @return {?}\n         */\n        function () { return TimepickerComponent; })),\n        multi: true\n    };\n    var TimepickerComponent = /** @class */ (function () {\n        function TimepickerComponent(_config, _cd, _store, _timepickerActions) {\n            var _this = this;\n            this._cd = _cd;\n            this._store = _store;\n            this._timepickerActions = _timepickerActions;\n            /**\n             * emits true if value is a valid date\n             */\n            this.isValid = new core.EventEmitter();\n            // min\\max validation for input fields\n            this.invalidHours = false;\n            this.invalidMinutes = false;\n            this.invalidSeconds = false;\n            // control value accessor methods\n            // tslint:disable-next-line:no-any\n            this.onChange = Function.prototype;\n            // tslint:disable-next-line:no-any\n            this.onTouched = Function.prototype;\n            Object.assign(this, _config);\n            this.timepickerSub = _store\n                .select((/**\n             * @param {?} state\n             * @return {?}\n             */\n            function (state) { return state.value; }))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                // update UI values if date changed\n                _this._renderTime(value);\n                _this.onChange(value);\n                _this._store.dispatch(_this._timepickerActions.updateControls(getControlsValue(_this)));\n            }));\n            _store\n                .select((/**\n             * @param {?} state\n             * @return {?}\n             */\n            function (state) { return state.controls; }))\n                .subscribe((/**\n             * @param {?} controlsState\n             * @return {?}\n             */\n            function (controlsState) {\n                _this.isValid.emit(isInputValid(_this.hours, _this.minutes, _this.seconds, _this.isPM()));\n                Object.assign(_this, controlsState);\n                _cd.markForCheck();\n            }));\n        }\n        Object.defineProperty(TimepickerComponent.prototype, \"isSpinnersVisible\", {\n            /** @deprecated - please use `isEditable` instead */\n            get: /**\n             * @deprecated - please use `isEditable` instead\n             * @return {?}\n             */\n            function () {\n                return this.showSpinners && !this.readonlyInput;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimepickerComponent.prototype, \"isEditable\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return !(this.readonlyInput || this.disabled);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        TimepickerComponent.prototype.resetValidation = /**\n         * @return {?}\n         */\n        function () {\n            this.invalidHours = false;\n            this.invalidMinutes = false;\n            this.invalidSeconds = false;\n        };\n        /**\n         * @return {?}\n         */\n        TimepickerComponent.prototype.isPM = /**\n         * @return {?}\n         */\n        function () {\n            return this.showMeridian && this.meridian === this.meridians[1];\n        };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        TimepickerComponent.prototype.prevDef = /**\n         * @param {?} $event\n         * @return {?}\n         */\n        function ($event) {\n            $event.preventDefault();\n        };\n        /**\n         * @param {?} $event\n         * @return {?}\n         */\n        TimepickerComponent.prototype.wheelSign = /**\n         * @param {?} $event\n         * @return {?}\n         */\n        function ($event) {\n            return Math.sign($event.deltaY) * -1;\n        };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        TimepickerComponent.prototype.ngOnChanges = /**\n         * @param {?} changes\n         * @return {?}\n         */\n        function (changes) {\n            this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\n        };\n        /**\n         * @param {?} step\n         * @param {?=} source\n         * @return {?}\n         */\n        TimepickerComponent.prototype.changeHours = /**\n         * @param {?} step\n         * @param {?=} source\n         * @return {?}\n         */\n        function (step, source) {\n            if (source === void 0) { source = ''; }\n            this.resetValidation();\n            this._store.dispatch(this._timepickerActions.changeHours({ step: step, source: source }));\n        };\n        /**\n         * @param {?} step\n         * @param {?=} source\n         * @return {?}\n         */\n        TimepickerComponent.prototype.changeMinutes = /**\n         * @param {?} step\n         * @param {?=} source\n         * @return {?}\n         */\n        function (step, source) {\n            if (source === void 0) { source = ''; }\n            this.resetValidation();\n            this._store.dispatch(this._timepickerActions.changeMinutes({ step: step, source: source }));\n        };\n        /**\n         * @param {?} step\n         * @param {?=} source\n         * @return {?}\n         */\n        TimepickerComponent.prototype.changeSeconds = /**\n         * @param {?} step\n         * @param {?=} source\n         * @return {?}\n         */\n        function (step, source) {\n            if (source === void 0) { source = ''; }\n            this.resetValidation();\n            this._store.dispatch(this._timepickerActions.changeSeconds({ step: step, source: source }));\n        };\n        /**\n         * @param {?} hours\n         * @return {?}\n         */\n        TimepickerComponent.prototype.updateHours = /**\n         * @param {?} hours\n         * @return {?}\n         */\n        function (hours) {\n            this.resetValidation();\n            this.hours = hours;\n            /** @type {?} */\n            var isValid = isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();\n            if (!isValid) {\n                this.invalidHours = true;\n                this.isValid.emit(false);\n                this.onChange(null);\n                return;\n            }\n            this._updateTime();\n        };\n        /**\n         * @param {?} minutes\n         * @return {?}\n         */\n        TimepickerComponent.prototype.updateMinutes = /**\n         * @param {?} minutes\n         * @return {?}\n         */\n        function (minutes) {\n            this.resetValidation();\n            this.minutes = minutes;\n            /** @type {?} */\n            var isValid = isMinuteInputValid(this.minutes) && this.isValidLimit();\n            if (!isValid) {\n                this.invalidMinutes = true;\n                this.isValid.emit(false);\n                this.onChange(null);\n                return;\n            }\n            this._updateTime();\n        };\n        /**\n         * @param {?} seconds\n         * @return {?}\n         */\n        TimepickerComponent.prototype.updateSeconds = /**\n         * @param {?} seconds\n         * @return {?}\n         */\n        function (seconds) {\n            this.resetValidation();\n            this.seconds = seconds;\n            /** @type {?} */\n            var isValid = isSecondInputValid(this.seconds) && this.isValidLimit();\n            if (!isValid) {\n                this.invalidSeconds = true;\n                this.isValid.emit(false);\n                this.onChange(null);\n                return;\n            }\n            this._updateTime();\n        };\n        /**\n         * @return {?}\n         */\n        TimepickerComponent.prototype.isValidLimit = /**\n         * @return {?}\n         */\n        function () {\n            return isInputLimitValid({\n                hour: this.hours,\n                minute: this.minutes,\n                seconds: this.seconds,\n                isPM: this.isPM()\n            }, this.max, this.min);\n        };\n        /**\n         * @return {?}\n         */\n        TimepickerComponent.prototype._updateTime = /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var _seconds = this.showSeconds ? this.seconds : void 0;\n            /** @type {?} */\n            var _minutes = this.showMinutes ? this.minutes : void 0;\n            if (!isInputValid(this.hours, _minutes, _seconds, this.isPM())) {\n                this.isValid.emit(false);\n                this.onChange(null);\n                return;\n            }\n            this._store.dispatch(this._timepickerActions.setTime({\n                hour: this.hours,\n                minute: this.minutes,\n                seconds: this.seconds,\n                isPM: this.isPM()\n            }));\n        };\n        /**\n         * @return {?}\n         */\n        TimepickerComponent.prototype.toggleMeridian = /**\n         * @return {?}\n         */\n        function () {\n            if (!this.showMeridian || !this.isEditable) {\n                return;\n            }\n            /** @type {?} */\n            var _hoursPerDayHalf = 12;\n            this._store.dispatch(this._timepickerActions.changeHours({\n                step: _hoursPerDayHalf,\n                source: ''\n            }));\n        };\n        /**\n         * Write a new value to the element.\n         */\n        /**\n         * Write a new value to the element.\n         * @param {?} obj\n         * @return {?}\n         */\n        TimepickerComponent.prototype.writeValue = /**\n         * Write a new value to the element.\n         * @param {?} obj\n         * @return {?}\n         */\n        function (obj) {\n            if (isValidDate(obj)) {\n                this._store.dispatch(this._timepickerActions.writeValue(parseTime(obj)));\n            }\n            else if (obj == null) {\n                this._store.dispatch(this._timepickerActions.writeValue(null));\n            }\n        };\n        /**\n         * Set the function to be called when the control receives a change event.\n         */\n        // tslint:disable-next-line:no-any\n        /**\n         * Set the function to be called when the control receives a change event.\n         * @param {?} fn\n         * @return {?}\n         */\n        // tslint:disable-next-line:no-any\n        TimepickerComponent.prototype.registerOnChange = /**\n         * Set the function to be called when the control receives a change event.\n         * @param {?} fn\n         * @return {?}\n         */\n        // tslint:disable-next-line:no-any\n        function (fn) {\n            this.onChange = fn;\n        };\n        /**\n         * Set the function to be called when the control receives a touch event.\n         */\n        /**\n         * Set the function to be called when the control receives a touch event.\n         * @param {?} fn\n         * @return {?}\n         */\n        TimepickerComponent.prototype.registerOnTouched = /**\n         * Set the function to be called when the control receives a touch event.\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            this.onTouched = fn;\n        };\n        /**\n         * This function is called when the control status changes to or from \"disabled\".\n         * Depending on the value, it will enable or disable the appropriate DOM element.\n         *\n         * @param isDisabled\n         */\n        /**\n         * This function is called when the control status changes to or from \"disabled\".\n         * Depending on the value, it will enable or disable the appropriate DOM element.\n         *\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        TimepickerComponent.prototype.setDisabledState = /**\n         * This function is called when the control status changes to or from \"disabled\".\n         * Depending on the value, it will enable or disable the appropriate DOM element.\n         *\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) {\n            this.disabled = isDisabled;\n            this._cd.markForCheck();\n        };\n        /**\n         * @return {?}\n         */\n        TimepickerComponent.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            this.timepickerSub.unsubscribe();\n        };\n        /**\n         * @private\n         * @param {?} value\n         * @return {?}\n         */\n        TimepickerComponent.prototype._renderTime = /**\n         * @private\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (!isValidDate(value)) {\n                this.hours = '';\n                this.minutes = '';\n                this.seconds = '';\n                this.meridian = this.meridians[0];\n                return;\n            }\n            /** @type {?} */\n            var _value = parseTime(value);\n            /** @type {?} */\n            var _hoursPerDayHalf = 12;\n            /** @type {?} */\n            var _hours = _value.getHours();\n            if (this.showMeridian) {\n                this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];\n                _hours = _hours % _hoursPerDayHalf;\n                // should be 12 PM, not 00 PM\n                if (_hours === 0) {\n                    _hours = _hoursPerDayHalf;\n                }\n            }\n            this.hours = padNumber(_hours);\n            this.minutes = padNumber(_value.getMinutes());\n            this.seconds = padNumber(_value.getUTCSeconds());\n        };\n        TimepickerComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'timepicker',\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore],\n                        template: \"<table>\\n  <tbody>\\n  <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\">\\n    <!-- increment hours button-->\\n    <td>\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementHours || !isEditable\\\"\\n         (click)=\\\"changeHours(hourStep)\\\"\\n      ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- increment minutes button -->\\n    <td *ngIf=\\\"showMinutes\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementMinutes || !isEditable\\\"\\n         (click)=\\\"changeMinutes(minuteStep)\\\"\\n      ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;</td>\\n    <!-- increment seconds button -->\\n    <td *ngIf=\\\"showSeconds\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementSeconds || !isEditable\\\"\\n         (click)=\\\"changeSeconds(secondsStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-up\\\"></span>\\n      </a>\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian placeholder-->\\n    <td *ngIf=\\\"showMeridian\\\"></td>\\n  </tr>\\n  <tr>\\n    <!-- hours -->\\n    <td class=\\\"form-group\\\" [class.has-error]=\\\"invalidHours\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidHours\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             placeholder=\\\"HH\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"hours\\\"\\n             (wheel)=\\\"prevDef($event);changeHours(hourStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeHours(hourStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeHours(-hourStep, 'key')\\\"\\n             (change)=\\\"updateHours($event.target.value)\\\"></td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;:&nbsp;</td>\\n    <!-- minutes -->\\n    <td class=\\\"form-group\\\" *ngIf=\\\"showMinutes\\\" [class.has-error]=\\\"invalidMinutes\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidMinutes\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             placeholder=\\\"MM\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"minutes\\\"\\n             (wheel)=\\\"prevDef($event);changeMinutes(minuteStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeMinutes(minuteStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeMinutes(-minuteStep, 'key')\\\"\\n             (change)=\\\"updateMinutes($event.target.value)\\\">\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;:&nbsp;</td>\\n    <!-- seconds -->\\n    <td class=\\\"form-group\\\" *ngIf=\\\"showSeconds\\\" [class.has-error]=\\\"invalidSeconds\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidSeconds\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             placeholder=\\\"SS\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"seconds\\\"\\n             (wheel)=\\\"prevDef($event);changeSeconds(secondsStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeSeconds(secondsStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeSeconds(-secondsStep, 'key')\\\"\\n             (change)=\\\"updateSeconds($event.target.value)\\\">\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian -->\\n    <td *ngIf=\\\"showMeridian\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\"\\n              [disabled]=\\\"!isEditable || !canToggleMeridian\\\"\\n              [class.disabled]=\\\"!isEditable || !canToggleMeridian\\\"\\n              (click)=\\\"toggleMeridian()\\\"\\n      >{{ meridian }}\\n      </button>\\n    </td>\\n  </tr>\\n  <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\">\\n    <!-- decrement hours button-->\\n    <td>\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementHours || !isEditable\\\"\\n         (click)=\\\"changeHours(-hourStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- decrement minutes button-->\\n    <td *ngIf=\\\"showMinutes\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementMinutes || !isEditable\\\"\\n         (click)=\\\"changeMinutes(-minuteStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;</td>\\n    <!-- decrement seconds button-->\\n    <td *ngIf=\\\"showSeconds\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementSeconds || !isEditable\\\"\\n         (click)=\\\"changeSeconds(-secondsStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian placeholder-->\\n    <td *ngIf=\\\"showMeridian\\\"></td>\\n  </tr>\\n  </tbody>\\n</table>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\"\\n    .bs-chevron {\\n      border-style: solid;\\n      display: block;\\n      width: 9px;\\n      height: 9px;\\n      position: relative;\\n      border-width: 3px 0px 0 3px;\\n    }\\n\\n    .bs-chevron-up {\\n      -webkit-transform: rotate(45deg);\\n      transform: rotate(45deg);\\n      top: 2px;\\n    }\\n\\n    .bs-chevron-down {\\n      -webkit-transform: rotate(-135deg);\\n      transform: rotate(-135deg);\\n      top: -2px;\\n    }\\n\\n    .bs-timepicker-field {\\n      width: 50px;\\n    }\\n  \"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TimepickerComponent.ctorParameters = function () { return [\n            { type: TimepickerConfig },\n            { type: core.ChangeDetectorRef },\n            { type: TimepickerStore },\n            { type: TimepickerActions }\n        ]; };\n        TimepickerComponent.propDecorators = {\n            hourStep: [{ type: core.Input }],\n            minuteStep: [{ type: core.Input }],\n            secondsStep: [{ type: core.Input }],\n            readonlyInput: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            mousewheel: [{ type: core.Input }],\n            arrowkeys: [{ type: core.Input }],\n            showSpinners: [{ type: core.Input }],\n            showMeridian: [{ type: core.Input }],\n            showMinutes: [{ type: core.Input }],\n            showSeconds: [{ type: core.Input }],\n            meridians: [{ type: core.Input }],\n            min: [{ type: core.Input }],\n            max: [{ type: core.Input }],\n            isValid: [{ type: core.Output }]\n        };\n        return TimepickerComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var TimepickerModule = /** @class */ (function () {\n        function TimepickerModule() {\n        }\n        /**\n         * @return {?}\n         */\n        TimepickerModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return {\n                ngModule: TimepickerModule,\n                providers: [TimepickerConfig, TimepickerActions, TimepickerStore]\n            };\n        };\n        TimepickerModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [TimepickerComponent],\n                        exports: [TimepickerComponent]\n                    },] }\n        ];\n        return TimepickerModule;\n    }());\n\n    exports.TimepickerActions = TimepickerActions;\n    exports.TimepickerComponent = TimepickerComponent;\n    exports.TimepickerConfig = TimepickerConfig;\n    exports.TimepickerModule = TimepickerModule;\n    exports.TimepickerStore = TimepickerStore;\n    exports.ɵa = TIMEPICKER_CONTROL_VALUE_ACCESSOR;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}