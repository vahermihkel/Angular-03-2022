/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Provides default configuration values for timepicker
 */
import * as ɵngcc0 from '@angular/core';
var TimepickerConfig = /** @class */ (function () {
    function TimepickerConfig() {
        /**
         * hours change step
         */
        this.hourStep = 1;
        /**
         * hours change step
         */
        this.minuteStep = 5;
        /**
         * seconds changes step
         */
        this.secondsStep = 10;
        /**
         * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
         */
        this.showMeridian = true;
        /**
         * meridian labels based on locale
         */
        this.meridians = ['AM', 'PM'];
        /**
         * if true hours and minutes fields will be readonly
         */
        this.readonlyInput = false;
        /**
         * if true hours and minutes fields will be disabled
         */
        this.disabled = false;
        /**
         * if true scroll inside hours and minutes inputs will change time
         */
        this.mousewheel = true;
        /**
         * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
         */
        this.arrowkeys = true;
        /**
         * if true spinner arrows above and below the inputs will be shown
         */
        this.showSpinners = true;
        /**
         * show seconds in timepicker
         */
        this.showSeconds = false;
        /**
         * show minutes in timepicker
         */
        this.showMinutes = true;
    }
TimepickerConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TimepickerConfig, factory: function TimepickerConfig_Factory(t) { return new (t || TimepickerConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TimepickerConfig, [{
        type: Injectable
    }], function () { return []; }, { hourStep: [], minuteStep: [], secondsStep: [], showMeridian: [], meridians: [], readonlyInput: [], disabled: [], mousewheel: [], arrowkeys: [], showSpinners: [], showSeconds: [], showMinutes: [] });
    return TimepickerConfig;
}());
export { TimepickerConfig };
if (false) {
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.hourStep;
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.minuteStep;
    /**
     * seconds changes step
     * @type {?}
     */
    TimepickerConfig.prototype.secondsStep;
    /**
     * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
     * @type {?}
     */
    TimepickerConfig.prototype.showMeridian;
    /**
     * meridian labels based on locale
     * @type {?}
     */
    TimepickerConfig.prototype.meridians;
    /**
     * if true hours and minutes fields will be readonly
     * @type {?}
     */
    TimepickerConfig.prototype.readonlyInput;
    /**
     * if true hours and minutes fields will be disabled
     * @type {?}
     */
    TimepickerConfig.prototype.disabled;
    /**
     * if true scroll inside hours and minutes inputs will change time
     * @type {?}
     */
    TimepickerConfig.prototype.mousewheel;
    /**
     * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
     * @type {?}
     */
    TimepickerConfig.prototype.arrowkeys;
    /**
     * if true spinner arrows above and below the inputs will be shown
     * @type {?}
     */
    TimepickerConfig.prototype.showSpinners;
    /**
     * show seconds in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showSeconds;
    /**
     * show minutes in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showMinutes;
    /**
     * minimum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.min;
    /**
     * maximum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.max;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC90aW1lcGlja2VyL2VzbTUvdGltZXBpY2tlci5jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQWtESzs7Ozs0T0FHQyIsImZpbGUiOiJ0aW1lcGlja2VyLmNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFByb3ZpZGVzIGRlZmF1bHQgY29uZmlndXJhdGlvbiB2YWx1ZXMgZm9yIHRpbWVwaWNrZXJcbiAqL1xudmFyIFRpbWVwaWNrZXJDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZXBpY2tlckNvbmZpZygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhvdXJzIGNoYW5nZSBzdGVwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhvdXJTdGVwID0gMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhvdXJzIGNoYW5nZSBzdGVwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pbnV0ZVN0ZXAgPSA1O1xuICAgICAgICAvKipcbiAgICAgICAgICogc2Vjb25kcyBjaGFuZ2VzIHN0ZXBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2Vjb25kc1N0ZXAgPSAxMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRydWUgd29ya3MgaW4gMTJIIG1vZGUgYW5kIGRpc3BsYXlzIEFNL1BNLiBJZiBmYWxzZSB3b3JrcyBpbiAyNEggbW9kZSBhbmQgaGlkZXMgQU0vUE1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvd01lcmlkaWFuID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1lcmlkaWFuIGxhYmVscyBiYXNlZCBvbiBsb2NhbGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWVyaWRpYW5zID0gWydBTScsICdQTSddO1xuICAgICAgICAvKipcbiAgICAgICAgICogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWFkb25seUlucHV0ID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIGRpc2FibGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlIHNjcm9sbCBpbnNpZGUgaG91cnMgYW5kIG1pbnV0ZXMgaW5wdXRzIHdpbGwgY2hhbmdlIHRpbWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubW91c2V3aGVlbCA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpZiB0cnVlIHRoZSB2YWx1ZXMgb2YgaG91cnMgYW5kIG1pbnV0ZXMgY2FuIGJlIGNoYW5nZWQgdXNpbmcgdGhlIHVwL2Rvd24gYXJyb3cga2V5cyBvbiB0aGUga2V5Ym9hcmRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXJyb3drZXlzID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRydWUgc3Bpbm5lciBhcnJvd3MgYWJvdmUgYW5kIGJlbG93IHRoZSBpbnB1dHMgd2lsbCBiZSBzaG93blxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaG93U3Bpbm5lcnMgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogc2hvdyBzZWNvbmRzIGluIHRpbWVwaWNrZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvd1NlY29uZHMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNob3cgbWludXRlcyBpbiB0aW1lcGlja2VyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3dNaW51dGVzID0gdHJ1ZTtcbiAgICB9XG4gICAgVGltZXBpY2tlckNvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIFRpbWVwaWNrZXJDb25maWc7XG59KCkpO1xuZXhwb3J0IHsgVGltZXBpY2tlckNvbmZpZyB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogaG91cnMgY2hhbmdlIHN0ZXBcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5ob3VyU3RlcDtcbiAgICAvKipcbiAgICAgKiBob3VycyBjaGFuZ2Ugc3RlcFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1pbnV0ZVN0ZXA7XG4gICAgLyoqXG4gICAgICogc2Vjb25kcyBjaGFuZ2VzIHN0ZXBcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5zZWNvbmRzU3RlcDtcbiAgICAvKipcbiAgICAgKiBpZiB0cnVlIHdvcmtzIGluIDEySCBtb2RlIGFuZCBkaXNwbGF5cyBBTS9QTS4gSWYgZmFsc2Ugd29ya3MgaW4gMjRIIG1vZGUgYW5kIGhpZGVzIEFNL1BNXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuc2hvd01lcmlkaWFuO1xuICAgIC8qKlxuICAgICAqIG1lcmlkaWFuIGxhYmVscyBiYXNlZCBvbiBsb2NhbGVcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUaW1lcGlja2VyQ29uZmlnLnByb3RvdHlwZS5tZXJpZGlhbnM7XG4gICAgLyoqXG4gICAgICogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSByZWFkb25seVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnJlYWRvbmx5SW5wdXQ7XG4gICAgLyoqXG4gICAgICogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSBkaXNhYmxlZFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLmRpc2FibGVkO1xuICAgIC8qKlxuICAgICAqIGlmIHRydWUgc2Nyb2xsIGluc2lkZSBob3VycyBhbmQgbWludXRlcyBpbnB1dHMgd2lsbCBjaGFuZ2UgdGltZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1vdXNld2hlZWw7XG4gICAgLyoqXG4gICAgICogaWYgdHJ1ZSB0aGUgdmFsdWVzIG9mIGhvdXJzIGFuZCBtaW51dGVzIGNhbiBiZSBjaGFuZ2VkIHVzaW5nIHRoZSB1cC9kb3duIGFycm93IGtleXMgb24gdGhlIGtleWJvYXJkXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuYXJyb3drZXlzO1xuICAgIC8qKlxuICAgICAqIGlmIHRydWUgc3Bpbm5lciBhcnJvd3MgYWJvdmUgYW5kIGJlbG93IHRoZSBpbnB1dHMgd2lsbCBiZSBzaG93blxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNob3dTcGlubmVycztcbiAgICAvKipcbiAgICAgKiBzaG93IHNlY29uZHMgaW4gdGltZXBpY2tlclxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLnNob3dTZWNvbmRzO1xuICAgIC8qKlxuICAgICAqIHNob3cgbWludXRlcyBpbiB0aW1lcGlja2VyXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUuc2hvd01pbnV0ZXM7XG4gICAgLyoqXG4gICAgICogbWluaW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIFRpbWVwaWNrZXJDb25maWcucHJvdG90eXBlLm1pbjtcbiAgICAvKipcbiAgICAgKiBtYXhpbXVtIHRpbWUgdXNlciBjYW4gc2VsZWN0XG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVGltZXBpY2tlckNvbmZpZy5wcm90b3R5cGUubWF4O1xufVxuIl19