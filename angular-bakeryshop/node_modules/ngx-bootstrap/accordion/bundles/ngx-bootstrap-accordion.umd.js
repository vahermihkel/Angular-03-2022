(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/utils'), require('@angular/common'), require('ngx-bootstrap/collapse'),require('@angular/core'),require('@angular/common'),require('ngx-bootstrap/collapse')) :
    typeof define === 'function' && define.amd ? define('ngx-bootstrap/accordion', ['exports', '@angular/core', 'ngx-bootstrap/utils', '@angular/common', 'ngx-bootstrap/collapse','@angular/core','@angular/common','ngx-bootstrap/collapse'], factory) :
    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].accordion = {}), global.ng.core, global.utils, global.ng.common, global.collapse));
}(this, function (exports, core, utils, common, collapse,ɵngcc0,ɵngcc1,ɵngcc2) { 
const _c0 = ["role", "tablist", 1, "panel-group", 2, "display", "block"];
const _c1 = ["*"];
const _c2 = [1, "panel", 2, "display", "block"];
const _c3 = [1, "panel", "card", 3, "ngClass"];
const _c4 = ["role", "tab", 1, "panel-heading", "card-header", 3, "ngClass", "click"];
const _c5 = [1, "panel-title"];
const _c6 = ["role", "button", 1, "accordion-toggle"];
const _c7 = ["class", "btn btn-link", 3, "ngClass", 4, "ngIf"];
const _c8 = ["role", "tabpanel", 1, "panel-collapse", "collapse", 3, "collapse", "isAnimated"];
const _c9 = [1, "panel-body", "card-block", "card-body"];
const _c10 = [1, "btn", "btn-link", 3, "ngClass"];
const _c11 = function (a0) { return { "text-muted": a0 }; };
function AccordionPanelComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", _c10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c11, ctx_r4.isDisabled));
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.heading, " ");
} }
const _c12 = [[["", "accordion-heading", ""]], "*"];
const _c13 = ["[accordion-heading]", "*"];
'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Configuration service, provides default values for the AccordionComponent.
     */
    var AccordionConfig = /** @class */ (function () {
        function AccordionConfig() {
            /**
             * Whether the other panels should be closed when a panel is opened
             */
            this.closeOthers = false;
            /**
             * turn on/off animation
             */
            this.isAnimated = false;
        }
AccordionConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: AccordionConfig, factory: function AccordionConfig_Factory(t) { return new (t || AccordionConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AccordionConfig, [{
        type: core.Injectable
    }], function () { return []; }, { closeOthers: [], isAnimated: [] });
        return AccordionConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Displays collapsible content panels for presenting information in a limited amount of space.
     */
    var AccordionComponent = /** @class */ (function () {
        function AccordionComponent(config) {
            /**
             * turn on/off animation
             */
            this.isAnimated = false;
            this.groups = [];
            Object.assign(this, config);
        }
        /**
         * @param {?} openGroup
         * @return {?}
         */
        AccordionComponent.prototype.closeOtherPanels = /**
         * @param {?} openGroup
         * @return {?}
         */
        function (openGroup) {
            if (!this.closeOthers) {
                return;
            }
            this.groups.forEach((/**
             * @param {?} group
             * @return {?}
             */
            function (group) {
                if (group !== openGroup) {
                    group.isOpen = false;
                }
            }));
        };
        /**
         * @param {?} group
         * @return {?}
         */
        AccordionComponent.prototype.addGroup = /**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            group.isAnimated = this.isAnimated;
            this.groups.push(group);
        };
        /**
         * @param {?} group
         * @return {?}
         */
        AccordionComponent.prototype.removeGroup = /**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            /** @type {?} */
            var index = this.groups.indexOf(group);
            if (index !== -1) {
                this.groups.splice(index, 1);
            }
        };
        /** @nocollapse */
        AccordionComponent.ctorParameters = function () { return [
            { type: AccordionConfig }
        ]; };
        AccordionComponent.propDecorators = {
            isAnimated: [{ type: core.Input }],
            closeOthers: [{ type: core.Input }]
        };
AccordionComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: AccordionComponent, selectors: [["accordion"]], factory: function AccordionComponent_Factory(t) { return new (t || AccordionComponent)(ɵngcc0.ɵɵdirectiveInject(AccordionConfig)); }, hostBindings: function AccordionComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(1);
        ɵngcc0.ɵɵelementHostAttrs(_c0);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-multiselectable", ctx.closeOthers);
    } }, inputs: { isAnimated: "isAnimated", closeOthers: "closeOthers" }, ngContentSelectors: _c1, consts: 1, vars: 0, template: function AccordionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AccordionComponent, [{
        type: core.Component,
        args: [{
                selector: 'accordion',
                template: "<ng-content></ng-content>",
                host: {
                    '[attr.aria-multiselectable]': 'closeOthers',
                    role: 'tablist',
                    class: 'panel-group',
                    style: 'display: block'
                }
            }]
    }], function () { return [{ type: AccordionConfig }]; }, { isAnimated: [{
            type: core.Input
        }], groups: [], closeOtherPanels: [], addGroup: [], removeGroup: [], closeOthers: [{
            type: core.Input
        }] });
        return AccordionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * ### Accordion heading
     * Instead of using `heading` attribute on the `accordion-group`, you can use
     * an `accordion-heading` attribute on `any` element inside of a group that
     * will be used as group's header template.
     */
    var AccordionPanelComponent = /** @class */ (function () {
        function AccordionPanelComponent(accordion) {
            /**
             * turn on/off animation
             */
            this.isAnimated = false;
            /**
             * Emits when the opened state changes
             */
            this.isOpenChange = new core.EventEmitter();
            this._isOpen = false;
            this.accordion = accordion;
        }
        Object.defineProperty(AccordionPanelComponent.prototype, "isOpen", {
            // Questionable, maybe .panel-open should be on child div.panel element?
            /** Is accordion group open or closed. This property supports two-way binding */
            get: 
            // Questionable, maybe .panel-open should be on child div.panel element?
            /**
             * Is accordion group open or closed. This property supports two-way binding
             * @return {?}
             */
            function () {
                return this._isOpen;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                if (value !== this.isOpen) {
                    if (value) {
                        this.accordion.closeOtherPanels(this);
                    }
                    this._isOpen = value;
                    Promise.resolve(null).then((/**
                     * @return {?}
                     */
                    function () {
                        _this.isOpenChange.emit(value);
                    }))
                        .catch((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        /* tslint:disable: no-console */
                        console.log(error);
                    }));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccordionPanelComponent.prototype, "isBs3", {
            get: /**
             * @return {?}
             */
            function () {
                return utils.isBs3();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AccordionPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.panelClass = this.panelClass || 'panel-default';
            this.accordion.addGroup(this);
        };
        /**
         * @return {?}
         */
        AccordionPanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.accordion.removeGroup(this);
        };
        /**
         * @return {?}
         */
        AccordionPanelComponent.prototype.toggleOpen = /**
         * @return {?}
         */
        function () {
            if (!this.isDisabled) {
                this.isOpen = !this.isOpen;
            }
        };
        /** @nocollapse */
        AccordionPanelComponent.ctorParameters = function () { return [
            { type: AccordionComponent, decorators: [{ type: core.Inject, args: [AccordionComponent,] }] }
        ]; };
        AccordionPanelComponent.propDecorators = {
            heading: [{ type: core.Input }],
            panelClass: [{ type: core.Input }],
            isDisabled: [{ type: core.Input }],
            isOpenChange: [{ type: core.Output }],
            isOpen: [{ type: core.HostBinding, args: ['class.panel-open',] }, { type: core.Input }]
        };
AccordionPanelComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: AccordionPanelComponent, selectors: [["accordion-group"], ["accordion-panel"]], factory: function AccordionPanelComponent_Factory(t) { return new (t || AccordionPanelComponent)(ɵngcc0.ɵɵdirectiveInject(AccordionComponent)); }, hostBindings: function AccordionPanelComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(1);
        ɵngcc0.ɵɵelementHostAttrs(_c2);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("panel-open", ctx.isOpen);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { isOpen: "isOpen", panelClass: "panelClass", heading: "heading", isDisabled: "isDisabled" }, outputs: { isOpenChange: "isOpenChange" }, ngContentSelectors: _c13, consts: 9, vars: 6, template: function AccordionPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c12);
        ɵngcc0.ɵɵelementStart(0, "div", _c3);
        ɵngcc0.ɵɵelementStart(1, "div", _c4);
        ɵngcc0.ɵɵlistener("click", function AccordionPanelComponent_Template_div_click_1_listener($event) { return ctx.toggleOpen(); });
        ɵngcc0.ɵɵelementStart(2, "div", _c5);
        ɵngcc0.ɵɵelementStart(3, "div", _c6);
        ɵngcc0.ɵɵtemplate(4, AccordionPanelComponent_button_4_Template, 2, 4, "button", _c7);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", _c8);
        ɵngcc0.ɵɵelementStart(7, "div", _c9);
        ɵngcc0.ɵɵprojection(8, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.panelClass);
        ɵngcc0.ɵɵselect(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.isDisabled ? "panel-disabled" : "panel-enabled");
        ɵngcc0.ɵɵselect(3);
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.isOpen);
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.heading);
        ɵngcc0.ɵɵselect(6);
        ɵngcc0.ɵɵproperty("collapse", !ctx.isOpen)("isAnimated", ctx.isAnimated);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc2.CollapseDirective], styles: ["[_nghost-%COMP%]   .card-header.panel-enabled[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]   .card-header.panel-disabled[_ngcontent-%COMP%]   .btn.btn-link[_ngcontent-%COMP%]{cursor:default;text-decoration:none}"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AccordionPanelComponent, [{
        type: core.Component,
        args: [{
                selector: 'accordion-group, accordion-panel',
                template: "<div class=\"panel card\" [ngClass]=\"panelClass\">\n  <div class=\"panel-heading card-header\" role=\"tab\"\n       (click)=\"toggleOpen()\" \n       [ngClass]=\"isDisabled ? 'panel-disabled' : 'panel-enabled'\">\n    \n    <div class=\"panel-title\">\n      <div role=\"button\" class=\"accordion-toggle\"\n           [attr.aria-expanded]=\"isOpen\">\n        <button class=\"btn btn-link\" *ngIf=\"heading\" [ngClass]=\"{'text-muted': isDisabled}\">\n          {{ heading }}\n        </button>\n        <ng-content select=\"[accordion-heading]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel-collapse collapse\" role=\"tabpanel\" [collapse]=\"!isOpen\" [isAnimated]=\"isAnimated\">\n    <div class=\"panel-body card-block card-body\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n",
                host: {
                    class: 'panel',
                    style: 'display: block'
                },
                styles: [":host .card-header.panel-enabled{cursor:pointer}:host .card-header.panel-disabled .btn.btn-link{cursor:default;text-decoration:none}"]
            }]
    }], function () { return [{ type: AccordionComponent, decorators: [{
                type: core.Inject,
                args: [AccordionComponent]
            }] }]; }, { isAnimated: [], isOpenChange: [{
            type: core.Output
        }], _isOpen: [], accordion: [], isOpen: [{
            type: core.HostBinding,
            args: ['class.panel-open']
        }, {
            type: core.Input
        }], isOpen: [], isBs3: [], ngOnInit: [], panelClass: [{
            type: core.Input
        }], ngOnDestroy: [], toggleOpen: [], heading: [{
            type: core.Input
        }], isDisabled: [{
            type: core.Input
        }] });
        return AccordionPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AccordionModule = /** @class */ (function () {
        function AccordionModule() {
        }
        /**
         * @return {?}
         */
        AccordionModule.forRoot = /**
         * @return {?}
         */
        function () {
            return { ngModule: AccordionModule, providers: [AccordionConfig] };
        };
AccordionModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: AccordionModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(AccordionModule, { declarations: [AccordionComponent,
        AccordionPanelComponent], imports: [ɵngcc1.CommonModule, ɵngcc2.CollapseModule], exports: [AccordionComponent,
        AccordionPanelComponent] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AccordionModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule, collapse.CollapseModule],
                declarations: [AccordionComponent, AccordionPanelComponent],
                exports: [AccordionComponent, AccordionPanelComponent]
            }]
    }], function () { return []; }, null);
AccordionModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function AccordionModule_Factory(t) { return new (t || AccordionModule)(); }, imports: [[common.CommonModule, collapse.CollapseModule]] });
        return AccordionModule;
    }());

    exports.AccordionComponent = AccordionComponent;
    exports.AccordionConfig = AccordionConfig;
    exports.AccordionModule = AccordionModule;
    exports.AccordionPanelComponent = AccordionPanelComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=ngx-bootstrap-accordion.umd.js.map