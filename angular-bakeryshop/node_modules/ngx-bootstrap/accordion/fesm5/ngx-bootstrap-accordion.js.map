{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/accordion/fesm5/ngx-bootstrap-accordion.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;KAUK;;;;yEAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoEA,AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4GA,AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAWA;;;;;;;;;;;;;;;;;;;MAmBA;;;;;;;;;;;;;8LAOA","file":"ngx-bootstrap-accordion.js","sourcesContent":["import { Injectable, Component, Input, Inject, Output, HostBinding, EventEmitter, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\nvar AccordionConfig = /** @class */ (function () {\n    function AccordionConfig() {\n        /**\n         * Whether the other panels should be closed when a panel is opened\n         */\n        this.closeOthers = false;\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n    }\n    AccordionConfig.decorators = [\n        { type: Injectable }\n    ];\n    return AccordionConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Displays collapsible content panels for presenting information in a limited amount of space.\n */\nvar AccordionComponent = /** @class */ (function () {\n    function AccordionComponent(config) {\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n        this.groups = [];\n        Object.assign(this, config);\n    }\n    /**\n     * @param {?} openGroup\n     * @return {?}\n     */\n    AccordionComponent.prototype.closeOtherPanels = /**\n     * @param {?} openGroup\n     * @return {?}\n     */\n    function (openGroup) {\n        if (!this.closeOthers) {\n            return;\n        }\n        this.groups.forEach((/**\n         * @param {?} group\n         * @return {?}\n         */\n        function (group) {\n            if (group !== openGroup) {\n                group.isOpen = false;\n            }\n        }));\n    };\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    AccordionComponent.prototype.addGroup = /**\n     * @param {?} group\n     * @return {?}\n     */\n    function (group) {\n        group.isAnimated = this.isAnimated;\n        this.groups.push(group);\n    };\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    AccordionComponent.prototype.removeGroup = /**\n     * @param {?} group\n     * @return {?}\n     */\n    function (group) {\n        /** @type {?} */\n        var index = this.groups.indexOf(group);\n        if (index !== -1) {\n            this.groups.splice(index, 1);\n        }\n    };\n    AccordionComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'accordion',\n                    template: \"<ng-content></ng-content>\",\n                    host: {\n                        '[attr.aria-multiselectable]': 'closeOthers',\n                        role: 'tablist',\n                        class: 'panel-group',\n                        style: 'display: block'\n                    }\n                }] }\n    ];\n    /** @nocollapse */\n    AccordionComponent.ctorParameters = function () { return [\n        { type: AccordionConfig }\n    ]; };\n    AccordionComponent.propDecorators = {\n        isAnimated: [{ type: Input }],\n        closeOthers: [{ type: Input }]\n    };\n    return AccordionComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\nvar AccordionPanelComponent = /** @class */ (function () {\n    function AccordionPanelComponent(accordion) {\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n        /**\n         * Emits when the opened state changes\n         */\n        this.isOpenChange = new EventEmitter();\n        this._isOpen = false;\n        this.accordion = accordion;\n    }\n    Object.defineProperty(AccordionPanelComponent.prototype, \"isOpen\", {\n        // Questionable, maybe .panel-open should be on child div.panel element?\n        /** Is accordion group open or closed. This property supports two-way binding */\n        get: \n        // Questionable, maybe .panel-open should be on child div.panel element?\n        /**\n         * Is accordion group open or closed. This property supports two-way binding\n         * @return {?}\n         */\n        function () {\n            return this._isOpen;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (value !== this.isOpen) {\n                if (value) {\n                    this.accordion.closeOtherPanels(this);\n                }\n                this._isOpen = value;\n                Promise.resolve(null).then((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.isOpenChange.emit(value);\n                }))\n                    .catch((/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                function (error) {\n                    /* tslint:disable: no-console */\n                    console.log(error);\n                }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AccordionPanelComponent.prototype, \"isBs3\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return isBs3();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AccordionPanelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.panelClass = this.panelClass || 'panel-default';\n        this.accordion.addGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AccordionPanelComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.accordion.removeGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AccordionPanelComponent.prototype.toggleOpen = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.isDisabled) {\n            this.isOpen = !this.isOpen;\n        }\n    };\n    AccordionPanelComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'accordion-group, accordion-panel',\n                    template: \"<div class=\\\"panel card\\\" [ngClass]=\\\"panelClass\\\">\\n  <div class=\\\"panel-heading card-header\\\" role=\\\"tab\\\"\\n       (click)=\\\"toggleOpen()\\\" \\n       [ngClass]=\\\"isDisabled ? 'panel-disabled' : 'panel-enabled'\\\">\\n    \\n    <div class=\\\"panel-title\\\">\\n      <div role=\\\"button\\\" class=\\\"accordion-toggle\\\"\\n           [attr.aria-expanded]=\\\"isOpen\\\">\\n        <button class=\\\"btn btn-link\\\" *ngIf=\\\"heading\\\" [ngClass]=\\\"{'text-muted': isDisabled}\\\">\\n          {{ heading }}\\n        </button>\\n        <ng-content select=\\\"[accordion-heading]\\\"></ng-content>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"panel-collapse collapse\\\" role=\\\"tabpanel\\\" [collapse]=\\\"!isOpen\\\" [isAnimated]=\\\"isAnimated\\\">\\n    <div class=\\\"panel-body card-block card-body\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                    host: {\n                        class: 'panel',\n                        style: 'display: block'\n                    },\n                    styles: [\":host .card-header.panel-enabled{cursor:pointer}:host .card-header.panel-disabled .btn.btn-link{cursor:default;text-decoration:none}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    AccordionPanelComponent.ctorParameters = function () { return [\n        { type: AccordionComponent, decorators: [{ type: Inject, args: [AccordionComponent,] }] }\n    ]; };\n    AccordionPanelComponent.propDecorators = {\n        heading: [{ type: Input }],\n        panelClass: [{ type: Input }],\n        isDisabled: [{ type: Input }],\n        isOpenChange: [{ type: Output }],\n        isOpen: [{ type: HostBinding, args: ['class.panel-open',] }, { type: Input }]\n    };\n    return AccordionPanelComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AccordionModule = /** @class */ (function () {\n    function AccordionModule() {\n    }\n    /**\n     * @return {?}\n     */\n    AccordionModule.forRoot = /**\n     * @return {?}\n     */\n    function () {\n        return { ngModule: AccordionModule, providers: [AccordionConfig] };\n    };\n    AccordionModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule, CollapseModule],\n                    declarations: [AccordionComponent, AccordionPanelComponent],\n                    exports: [AccordionComponent, AccordionPanelComponent]\n                },] }\n    ];\n    return AccordionModule;\n}());\n\nexport { AccordionComponent, AccordionConfig, AccordionModule, AccordionPanelComponent };\n"]}