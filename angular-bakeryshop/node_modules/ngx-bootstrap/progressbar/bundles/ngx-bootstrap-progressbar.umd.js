(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/utils'), require('@angular/common'),require('@angular/core'),require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-bootstrap/progressbar', ['exports', '@angular/core', 'ngx-bootstrap/utils', '@angular/common','@angular/core','@angular/common'], factory) :
    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].progressbar = {}), global.ng.core, global.utils, global.ng.common));
}(this, function (exports, core, utils, common,ɵngcc0,ɵngcc1) { 
const _c0 = [3, "type", "value", 4, "ngIf"];
const _c1 = [3, "ngIf"];
const _c2 = [3, "type", "value"];
function ProgressbarComponent_bar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "bar", _c2);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1291 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("type", ctx_r1291.type)("value", ctx_r1291._value);
} }
const _c3 = [3, "type", "value", 4, "ngFor", "ngForOf"];
function ProgressbarComponent_ng_template_1_bar_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "bar", _c2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1294 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("type", item_r1294.type)("value", item_r1294.value);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(item_r1294.label);
} }
function ProgressbarComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_ng_template_1_bar_0_Template, 2, 3, "bar", _c3);
} if (rf & 2) {
    const ctx_r1292 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1292._value);
} }
const _c4 = ["*"];
const _c5 = ["role", "progressbar", "aria-valuemin", "0"];
'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressbarConfig = /** @class */ (function () {
        function ProgressbarConfig() {
            /**
             * if `true` changing value of progress bar will be animated
             */
            this.animate = false;
            /**
             * maximum total value of progress element
             */
            this.max = 100;
        }
ProgressbarConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ProgressbarConfig, factory: function ProgressbarConfig_Factory(t) { return new (t || ProgressbarConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ProgressbarConfig, [{
        type: core.Injectable
    }], function () { return []; }, { animate: [], max: [] });
        return ProgressbarConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressbarComponent = /** @class */ (function () {
        function ProgressbarComponent(config) {
            this.isStacked = false;
            this.addClass = true;
            /* tslint:disable-next-line:no-any */
            this.bars = [];
            this._max = 100;
            Object.assign(this, config);
        }
        Object.defineProperty(ProgressbarComponent.prototype, "animate", {
            /** if `true` changing value of progress bar will be animated */
            set: /**
             * if `true` changing value of progress bar will be animated
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._animate = value;
                this.bars.forEach((/**
                 * @param {?} b
                 * @return {?}
                 */
                function (b) {
                    b.animate = value;
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "striped", {
            /** If `true`, striped classes are applied */
            set: /**
             * If `true`, striped classes are applied
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._striped = value;
                this.bars.forEach((/**
                 * @param {?} b
                 * @return {?}
                 */
                function (b) {
                    b.striped = value;
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "value", {
            /** current value of progress bar. Could be a number or array of objects
             * like {"value":15,"type":"info","label":"15 %"}
             */
            set: /**
             * current value of progress bar. Could be a number or array of objects
             * like {"value":15,"type":"info","label":"15 %"}
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.isStacked = Array.isArray(value);
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "isBs3", {
            get: /**
             * @return {?}
             */
            function () {
                return utils.isBs3();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "max", {
            /** maximum total value of progress element */
            get: /**
             * maximum total value of progress element
             * @return {?}
             */
            function () {
                return this._max;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                this._max = v;
                this.bars.forEach((/**
                 * @param {?} bar
                 * @return {?}
                 */
                function (bar) {
                    bar.recalculatePercentage();
                }));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} bar
         * @return {?}
         */
        ProgressbarComponent.prototype.addBar = /**
         * @param {?} bar
         * @return {?}
         */
        function (bar) {
            bar.animate = this._animate;
            bar.striped = this._striped;
            this.bars.push(bar);
        };
        /**
         * @param {?} bar
         * @return {?}
         */
        ProgressbarComponent.prototype.removeBar = /**
         * @param {?} bar
         * @return {?}
         */
        function (bar) {
            this.bars.splice(this.bars.indexOf(bar), 1);
        };
        /** @nocollapse */
        ProgressbarComponent.ctorParameters = function () { return [
            { type: ProgressbarConfig }
        ]; };
        ProgressbarComponent.propDecorators = {
            animate: [{ type: core.Input }],
            striped: [{ type: core.Input }],
            type: [{ type: core.Input }],
            value: [{ type: core.Input }],
            max: [{ type: core.HostBinding, args: ['attr.max',] }, { type: core.Input }],
            addClass: [{ type: core.HostBinding, args: ['class.progress',] }]
        };
ProgressbarComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ProgressbarComponent, selectors: [["progressbar"]], factory: function ProgressbarComponent_Factory(t) { return new (t || ProgressbarComponent)(ɵngcc0.ɵɵdirectiveInject(ProgressbarConfig)); }, hostBindings: function ProgressbarComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(2);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("max", ctx.max);
        ɵngcc0.ɵɵclassProp("progress", ctx.addClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { animate: "animate", striped: "striped", value: "value", max: "max", type: "type" }, ngContentSelectors: _c4, consts: 2, vars: 2, template: function ProgressbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_bar_0_Template, 2, 2, "bar", _c0);
        ɵngcc0.ɵɵtemplate(1, ProgressbarComponent_ng_template_1_Template, 1, 1, "ng-template", _c1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isStacked);
        ɵngcc0.ɵɵselect(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isStacked);
    } }, directives: function () { return [ɵngcc1.NgIf, BarComponent, ɵngcc1.NgForOf]; }, styles: ["[_nghost-%COMP%] {\n      width: 100%;\n      display: flex;\n    }"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ProgressbarComponent, [{
        type: core.Component,
        args: [{
                selector: 'progressbar',
                template: "<bar [type]=\"type\" [value]=\"_value\" *ngIf=\"!isStacked\">\n  <ng-content></ng-content>\n</bar>\n<ng-template [ngIf]=\"isStacked\">\n  <bar *ngFor=\"let item of _value\" [type]=\"item.type\" [value]=\"item.value\">{{ item.label }}</bar>\n</ng-template>\n",
                styles: ["\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  "]
            }]
    }], function () { return [{ type: ProgressbarConfig }]; }, { isStacked: [], addClass: [{
            type: core.HostBinding,
            args: ['class.progress']
        }], bars: [], _max: [], animate: [{
            type: core.Input
        }], striped: [{
            type: core.Input
        }], value: [{
            type: core.Input
        }], isBs3: [], max: [{
            type: core.HostBinding,
            args: ['attr.max']
        }, {
            type: core.Input
        }], max: [], addBar: [], removeBar: [], type: [{
            type: core.Input
        }] });
        return ProgressbarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // todo: number pipe
    // todo: use query from progress?
    var BarComponent = /** @class */ (function () {
        function BarComponent(progress) {
            this.percent = 0;
            this.progress = progress;
        }
        Object.defineProperty(BarComponent.prototype, "value", {
            /** current value of progress bar */
            get: /**
             * current value of progress bar
             * @return {?}
             */
            function () {
                return this._value;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (!v && v !== 0) {
                    return;
                }
                this._value = v;
                this.recalculatePercentage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BarComponent.prototype, "setBarWidth", {
            get: /**
             * @return {?}
             */
            function () {
                this.recalculatePercentage();
                return this.percent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BarComponent.prototype, "isBs3", {
            get: /**
             * @return {?}
             */
            function () {
                return utils.isBs3();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.progress.addBar(this);
        };
        /**
         * @return {?}
         */
        BarComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.progress.removeBar(this);
        };
        /**
         * @return {?}
         */
        BarComponent.prototype.recalculatePercentage = /**
         * @return {?}
         */
        function () {
            this.percent = +(this.value / this.progress.max * 100).toFixed(2);
            /** @type {?} */
            var totalPercentage = this.progress.bars
                .reduce((/**
             * @param {?} total
             * @param {?} bar
             * @return {?}
             */
            function (total, bar) {
                return total + bar.percent;
            }), 0);
            if (totalPercentage > 100) {
                this.percent -= totalPercentage - 100;
            }
        };
        /** @nocollapse */
        BarComponent.ctorParameters = function () { return [
            { type: ProgressbarComponent, decorators: [{ type: core.Host }] }
        ]; };
        BarComponent.propDecorators = {
            type: [{ type: core.Input }],
            value: [{ type: core.Input }],
            setBarWidth: [{ type: core.HostBinding, args: ['style.width.%',] }]
        };
BarComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: BarComponent, selectors: [["bar"]], factory: function BarComponent_Factory(t) { return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ProgressbarComponent, 1)); }, hostBindings: function BarComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(9);
        ɵngcc0.ɵɵelementHostAttrs(_c5);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-valuenow", ctx.value)("aria-valuetext", ctx.percent ? ctx.percent.toFixed(0) + "%" : "")("aria-valuemax", ctx.max);
        ɵngcc0.ɵɵclassMap("progress-bar " + (ctx.type ? "progress-bar-" + ctx.type + " bg-" + ctx.type : ""));
        ɵngcc0.ɵɵstyleProp("height", "100", "%");
        ɵngcc0.ɵɵstyleProp("width", ctx.setBarWidth, "%");
        ɵngcc0.ɵɵclassProp("progress-bar-animated", !ctx.isBs3 && ctx.animate);
        ɵngcc0.ɵɵclassProp("progress-bar-striped", ctx.striped);
        ɵngcc0.ɵɵclassProp("active", ctx.isBs3 && ctx.animate);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { value: "value", type: "type" }, ngContentSelectors: _c4, consts: 1, vars: 0, template: function BarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BarComponent, [{
        type: core.Component,
        args: [{
                selector: 'bar',
                template: "<ng-content></ng-content>\n",
                host: {
                    role: 'progressbar',
                    'aria-valuemin': '0',
                    '[class]': '"progress-bar " + (type ? "progress-bar-" + type + " bg-" + type : "")',
                    '[class.progress-bar-animated]': '!isBs3 && animate',
                    '[class.progress-bar-striped]': 'striped',
                    '[class.active]': 'isBs3 && animate',
                    '[attr.aria-valuenow]': 'value',
                    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + "%" : ""',
                    '[attr.aria-valuemax]': 'max',
                    '[style.height.%]': '"100"'
                }
            }]
    }], function () { return [{ type: ProgressbarComponent, decorators: [{
                type: core.Host
            }] }]; }, { percent: [], progress: [], value: [{
            type: core.Input
        }], value: [], setBarWidth: [{
            type: core.HostBinding,
            args: ['style.width.%']
        }], isBs3: [], ngOnInit: [], ngOnDestroy: [], recalculatePercentage: [], type: [{
            type: core.Input
        }] });
        return BarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressbarModule = /** @class */ (function () {
        function ProgressbarModule() {
        }
        /**
         * @return {?}
         */
        ProgressbarModule.forRoot = /**
         * @return {?}
         */
        function () {
            return { ngModule: ProgressbarModule, providers: [ProgressbarConfig] };
        };
ProgressbarModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: ProgressbarModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(ProgressbarModule, { declarations: [BarComponent,
        ProgressbarComponent], imports: [ɵngcc1.CommonModule], exports: [BarComponent,
        ProgressbarComponent] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ProgressbarModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [BarComponent, ProgressbarComponent],
                exports: [BarComponent, ProgressbarComponent]
            }]
    }], function () { return []; }, null);
ProgressbarModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function ProgressbarModule_Factory(t) { return new (t || ProgressbarModule)(); }, imports: [[common.CommonModule]] });
        return ProgressbarModule;
    }());

    exports.BarComponent = BarComponent;
    exports.ProgressbarComponent = ProgressbarComponent;
    exports.ProgressbarConfig = ProgressbarConfig;
    exports.ProgressbarModule = ProgressbarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=ngx-bootstrap-progressbar.umd.js.map