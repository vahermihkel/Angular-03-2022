{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/progressbar/bundles/ngx-bootstrap-progressbar.umd.js"],"names":[],"mappings":"AAAA;4NACwK;4LACd;;4DAE5G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAI;;;;;;;;;;;;;;;;SAgBzC;;;;8DAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqIA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkGA,AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cASA;;;;;;;;;;;;;;;;;;;UAmBA;;;;;;;;;;;;;2LAOA","file":"ngx-bootstrap-progressbar.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/utils'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/progressbar', ['exports', '@angular/core', 'ngx-bootstrap/utils', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].progressbar = {}), global.ng.core, global.utils, global.ng.common));\n}(this, function (exports, core, utils, common) { 'use strict';\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var ProgressbarConfig = /** @class */ (function () {\n        function ProgressbarConfig() {\n            /**\n             * if `true` changing value of progress bar will be animated\n             */\n            this.animate = false;\n            /**\n             * maximum total value of progress element\n             */\n            this.max = 100;\n        }\n        ProgressbarConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return ProgressbarConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var ProgressbarComponent = /** @class */ (function () {\n        function ProgressbarComponent(config) {\n            this.isStacked = false;\n            this.addClass = true;\n            /* tslint:disable-next-line:no-any */\n            this.bars = [];\n            this._max = 100;\n            Object.assign(this, config);\n        }\n        Object.defineProperty(ProgressbarComponent.prototype, \"animate\", {\n            /** if `true` changing value of progress bar will be animated */\n            set: /**\n             * if `true` changing value of progress bar will be animated\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this._animate = value;\n                this.bars.forEach((/**\n                 * @param {?} b\n                 * @return {?}\n                 */\n                function (b) {\n                    b.animate = value;\n                }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ProgressbarComponent.prototype, \"striped\", {\n            /** If `true`, striped classes are applied */\n            set: /**\n             * If `true`, striped classes are applied\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this._striped = value;\n                this.bars.forEach((/**\n                 * @param {?} b\n                 * @return {?}\n                 */\n                function (b) {\n                    b.striped = value;\n                }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ProgressbarComponent.prototype, \"value\", {\n            /** current value of progress bar. Could be a number or array of objects\n             * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n             */\n            set: /**\n             * current value of progress bar. Could be a number or array of objects\n             * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this.isStacked = Array.isArray(value);\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ProgressbarComponent.prototype, \"isBs3\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return utils.isBs3();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ProgressbarComponent.prototype, \"max\", {\n            /** maximum total value of progress element */\n            get: /**\n             * maximum total value of progress element\n             * @return {?}\n             */\n            function () {\n                return this._max;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                this._max = v;\n                this.bars.forEach((/**\n                 * @param {?} bar\n                 * @return {?}\n                 */\n                function (bar) {\n                    bar.recalculatePercentage();\n                }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} bar\n         * @return {?}\n         */\n        ProgressbarComponent.prototype.addBar = /**\n         * @param {?} bar\n         * @return {?}\n         */\n        function (bar) {\n            bar.animate = this._animate;\n            bar.striped = this._striped;\n            this.bars.push(bar);\n        };\n        /**\n         * @param {?} bar\n         * @return {?}\n         */\n        ProgressbarComponent.prototype.removeBar = /**\n         * @param {?} bar\n         * @return {?}\n         */\n        function (bar) {\n            this.bars.splice(this.bars.indexOf(bar), 1);\n        };\n        ProgressbarComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'progressbar',\n                        template: \"<bar [type]=\\\"type\\\" [value]=\\\"_value\\\" *ngIf=\\\"!isStacked\\\">\\n  <ng-content></ng-content>\\n</bar>\\n<ng-template [ngIf]=\\\"isStacked\\\">\\n  <bar *ngFor=\\\"let item of _value\\\" [type]=\\\"item.type\\\" [value]=\\\"item.value\\\">{{ item.label }}</bar>\\n</ng-template>\\n\",\n                        styles: [\"\\n    :host {\\n      width: 100%;\\n      display: flex;\\n    }\\n  \"]\n                    }] }\n        ];\n        /** @nocollapse */\n        ProgressbarComponent.ctorParameters = function () { return [\n            { type: ProgressbarConfig }\n        ]; };\n        ProgressbarComponent.propDecorators = {\n            animate: [{ type: core.Input }],\n            striped: [{ type: core.Input }],\n            type: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            max: [{ type: core.HostBinding, args: ['attr.max',] }, { type: core.Input }],\n            addClass: [{ type: core.HostBinding, args: ['class.progress',] }]\n        };\n        return ProgressbarComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    // todo: number pipe\n    // todo: use query from progress?\n    var BarComponent = /** @class */ (function () {\n        function BarComponent(progress) {\n            this.percent = 0;\n            this.progress = progress;\n        }\n        Object.defineProperty(BarComponent.prototype, \"value\", {\n            /** current value of progress bar */\n            get: /**\n             * current value of progress bar\n             * @return {?}\n             */\n            function () {\n                return this._value;\n            },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                if (!v && v !== 0) {\n                    return;\n                }\n                this._value = v;\n                this.recalculatePercentage();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BarComponent.prototype, \"setBarWidth\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                this.recalculatePercentage();\n                return this.percent;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BarComponent.prototype, \"isBs3\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return utils.isBs3();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        BarComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            this.progress.addBar(this);\n        };\n        /**\n         * @return {?}\n         */\n        BarComponent.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            this.progress.removeBar(this);\n        };\n        /**\n         * @return {?}\n         */\n        BarComponent.prototype.recalculatePercentage = /**\n         * @return {?}\n         */\n        function () {\n            this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n            /** @type {?} */\n            var totalPercentage = this.progress.bars\n                .reduce((/**\n             * @param {?} total\n             * @param {?} bar\n             * @return {?}\n             */\n            function (total, bar) {\n                return total + bar.percent;\n            }), 0);\n            if (totalPercentage > 100) {\n                this.percent -= totalPercentage - 100;\n            }\n        };\n        BarComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'bar',\n                        template: \"<ng-content></ng-content>\\n\",\n                        host: {\n                            role: 'progressbar',\n                            'aria-valuemin': '0',\n                            '[class]': '\"progress-bar \" + (type ? \"progress-bar-\" + type + \" bg-\" + type : \"\")',\n                            '[class.progress-bar-animated]': '!isBs3 && animate',\n                            '[class.progress-bar-striped]': 'striped',\n                            '[class.active]': 'isBs3 && animate',\n                            '[attr.aria-valuenow]': 'value',\n                            '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n                            '[attr.aria-valuemax]': 'max',\n                            '[style.height.%]': '\"100\"'\n                        }\n                    }] }\n        ];\n        /** @nocollapse */\n        BarComponent.ctorParameters = function () { return [\n            { type: ProgressbarComponent, decorators: [{ type: core.Host }] }\n        ]; };\n        BarComponent.propDecorators = {\n            type: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            setBarWidth: [{ type: core.HostBinding, args: ['style.width.%',] }]\n        };\n        return BarComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var ProgressbarModule = /** @class */ (function () {\n        function ProgressbarModule() {\n        }\n        /**\n         * @return {?}\n         */\n        ProgressbarModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return { ngModule: ProgressbarModule, providers: [ProgressbarConfig] };\n        };\n        ProgressbarModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [BarComponent, ProgressbarComponent],\n                        exports: [BarComponent, ProgressbarComponent]\n                    },] }\n        ];\n        return ProgressbarModule;\n    }());\n\n    exports.BarComponent = BarComponent;\n    exports.ProgressbarComponent = ProgressbarComponent;\n    exports.ProgressbarConfig = ProgressbarConfig;\n    exports.ProgressbarModule = ProgressbarModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}