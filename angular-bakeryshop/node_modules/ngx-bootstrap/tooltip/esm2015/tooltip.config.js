/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for tooltip
 */
import * as ɵngcc0 from '@angular/core';
export class TooltipConfig {
    constructor() {
        /**
         * sets disable adaptive position
         */
        this.adaptivePosition = true;
        /**
         * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
         */
        this.placement = 'top';
        /**
         * array of event names which triggers tooltip opening
         */
        this.triggers = 'hover focus';
        /**
         * delay before showing the tooltip
         */
        this.delay = 0;
    }
}
TooltipConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TooltipConfig, factory: function TooltipConfig_Factory(t) { return new (t || TooltipConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TooltipConfig, [{
        type: Injectable
    }], function () { return []; }, { constructor: [], adaptivePosition: [], placement: [], triggers: [], delay: [] });
if (false) {
    /**
     * sets disable adaptive position
     * @type {?}
     */
    TooltipConfig.prototype.adaptivePosition;
    /**
     * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
     * @type {?}
     */
    TooltipConfig.prototype.placement;
    /**
     * array of event names which triggers tooltip opening
     * @type {?}
     */
    TooltipConfig.prototype.triggers;
    /**
     * a selector specifying the element the tooltip should be appended to.
     * @type {?}
     */
    TooltipConfig.prototype.container;
    /**
     * delay before showing the tooltip
     * @type {?}
     */
    TooltipConfig.prototype.delay;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC90b29sdGlwL2VzbTIwMTUvdG9vbHRpcC5jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQyxzSEFHQyIsImZpbGUiOiJ0b29sdGlwLmNvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIERlZmF1bHQgdmFsdWVzIHByb3ZpZGVyIGZvciB0b29sdGlwXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29sdGlwQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldHMgZGlzYWJsZSBhZGFwdGl2ZSBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hZGFwdGl2ZVBvc2l0aW9uID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRvb2x0aXAgcGxhY2VtZW50LCBzdXBwb3J0ZWQgcG9zaXRpb25zOiAndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wbGFjZW1lbnQgPSAndG9wJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFycmF5IG9mIGV2ZW50IG5hbWVzIHdoaWNoIHRyaWdnZXJzIHRvb2x0aXAgb3BlbmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50cmlnZ2VycyA9ICdob3ZlciBmb2N1cyc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZWxheSBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWxheSA9IDA7XG4gICAgfVxufVxuVG9vbHRpcENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9XG5dO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogc2V0cyBkaXNhYmxlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUuYWRhcHRpdmVQb3NpdGlvbjtcbiAgICAvKipcbiAgICAgKiB0b29sdGlwIHBsYWNlbWVudCwgc3VwcG9ydGVkIHBvc2l0aW9uczogJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCdcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5wbGFjZW1lbnQ7XG4gICAgLyoqXG4gICAgICogYXJyYXkgb2YgZXZlbnQgbmFtZXMgd2hpY2ggdHJpZ2dlcnMgdG9vbHRpcCBvcGVuaW5nXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUudHJpZ2dlcnM7XG4gICAgLyoqXG4gICAgICogYSBzZWxlY3RvciBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRoZSB0b29sdGlwIHNob3VsZCBiZSBhcHBlbmRlZCB0by5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5jb250YWluZXI7XG4gICAgLyoqXG4gICAgICogZGVsYXkgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXBcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5kZWxheTtcbn1cbiJdfQ==