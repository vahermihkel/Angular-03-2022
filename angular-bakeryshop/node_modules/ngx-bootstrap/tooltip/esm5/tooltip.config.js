/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Default values provider for tooltip
 */
import * as ɵngcc0 from '@angular/core';
var TooltipConfig = /** @class */ (function () {
    function TooltipConfig() {
        /**
         * sets disable adaptive position
         */
        this.adaptivePosition = true;
        /**
         * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
         */
        this.placement = 'top';
        /**
         * array of event names which triggers tooltip opening
         */
        this.triggers = 'hover focus';
        /**
         * delay before showing the tooltip
         */
        this.delay = 0;
    }
TooltipConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TooltipConfig, factory: function TooltipConfig_Factory(t) { return new (t || TooltipConfig)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TooltipConfig, [{
        type: Injectable
    }], function () { return []; }, { adaptivePosition: [], placement: [], triggers: [], delay: [] });
    return TooltipConfig;
}());
export { TooltipConfig };
if (false) {
    /**
     * sets disable adaptive position
     * @type {?}
     */
    TooltipConfig.prototype.adaptivePosition;
    /**
     * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'
     * @type {?}
     */
    TooltipConfig.prototype.placement;
    /**
     * array of event names which triggers tooltip opening
     * @type {?}
     */
    TooltipConfig.prototype.triggers;
    /**
     * a selector specifying the element the tooltip should be appended to.
     * @type {?}
     */
    TooltipConfig.prototype.container;
    /**
     * delay before showing the tooltip
     * @type {?}
     */
    TooltipConfig.prototype.delay;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvbmd4LWJvb3RzdHJhcC90b29sdGlwL2VzbTUvdG9vbHRpcC5jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FrQks7Ozs7c0dBR0MiLCJmaWxlIjoidG9vbHRpcC5jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBEZWZhdWx0IHZhbHVlcyBwcm92aWRlciBmb3IgdG9vbHRpcFxuICovXG52YXIgVG9vbHRpcENvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb29sdGlwQ29uZmlnKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogc2V0cyBkaXNhYmxlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFkYXB0aXZlUG9zaXRpb24gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogdG9vbHRpcCBwbGFjZW1lbnQsIHN1cHBvcnRlZCBwb3NpdGlvbnM6ICd0b3AnLCAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBsYWNlbWVudCA9ICd0b3AnO1xuICAgICAgICAvKipcbiAgICAgICAgICogYXJyYXkgb2YgZXZlbnQgbmFtZXMgd2hpY2ggdHJpZ2dlcnMgdG9vbHRpcCBvcGVuaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyaWdnZXJzID0gJ2hvdmVyIGZvY3VzJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRlbGF5IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlbGF5ID0gMDtcbiAgICB9XG4gICAgVG9vbHRpcENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIFRvb2x0aXBDb25maWc7XG59KCkpO1xuZXhwb3J0IHsgVG9vbHRpcENvbmZpZyB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogc2V0cyBkaXNhYmxlIGFkYXB0aXZlIHBvc2l0aW9uXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUuYWRhcHRpdmVQb3NpdGlvbjtcbiAgICAvKipcbiAgICAgKiB0b29sdGlwIHBsYWNlbWVudCwgc3VwcG9ydGVkIHBvc2l0aW9uczogJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCdcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5wbGFjZW1lbnQ7XG4gICAgLyoqXG4gICAgICogYXJyYXkgb2YgZXZlbnQgbmFtZXMgd2hpY2ggdHJpZ2dlcnMgdG9vbHRpcCBvcGVuaW5nXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgVG9vbHRpcENvbmZpZy5wcm90b3R5cGUudHJpZ2dlcnM7XG4gICAgLyoqXG4gICAgICogYSBzZWxlY3RvciBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRoZSB0b29sdGlwIHNob3VsZCBiZSBhcHBlbmRlZCB0by5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5jb250YWluZXI7XG4gICAgLyoqXG4gICAgICogZGVsYXkgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXBcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBUb29sdGlwQ29uZmlnLnByb3RvdHlwZS5kZWxheTtcbn1cbiJdfQ==