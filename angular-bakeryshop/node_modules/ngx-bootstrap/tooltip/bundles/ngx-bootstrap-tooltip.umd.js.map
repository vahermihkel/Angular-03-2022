{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/tooltip/bundles/ngx-bootstrap-tooltip.umd.js"],"names":[],"mappings":"AAAA;8TAC0Q;+PAC7C;;gGAE3I;;;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAqD7E;;;;sGAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAuCA,AAgcAwCgD;;;;;;;;;;;;;;;;;;;;;;UAsBhD;;;;;;;;;;;;;+KAQA","file":"ngx-bootstrap-tooltip.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/utils'), require('ngx-bootstrap/component-loader'), require('ngx-bootstrap/positioning'), require('rxjs'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/tooltip', ['exports', '@angular/core', 'ngx-bootstrap/utils', 'ngx-bootstrap/component-loader', 'ngx-bootstrap/positioning', 'rxjs', '@angular/common'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].tooltip = {}), global.ng.core, global.utils, global.componentLoader, global.positioning, global.rxjs, global.ng.common));\n}(this, function (exports, core, utils, componentLoader, positioning, rxjs, common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * Default values provider for tooltip\n     */\n    var TooltipConfig = /** @class */ (function () {\n        function TooltipConfig() {\n            /**\n             * sets disable adaptive position\n             */\n            this.adaptivePosition = true;\n            /**\n             * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'\n             */\n            this.placement = 'top';\n            /**\n             * array of event names which triggers tooltip opening\n             */\n            this.triggers = 'hover focus';\n            /**\n             * delay before showing the tooltip\n             */\n            this.delay = 0;\n        }\n        TooltipConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return TooltipConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var TooltipContainerComponent = /** @class */ (function () {\n        function TooltipContainerComponent(config) {\n            Object.assign(this, config);\n        }\n        Object.defineProperty(TooltipContainerComponent.prototype, \"isBs3\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return utils.isBs3();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        TooltipContainerComponent.prototype.ngAfterViewInit = /**\n         * @return {?}\n         */\n        function () {\n            this.classMap = { in: false, fade: false };\n            this.classMap[this.placement] = true;\n            this.classMap[\"tooltip-\" + this.placement] = true;\n            this.classMap.in = true;\n            if (this.animation) {\n                this.classMap.fade = true;\n            }\n            if (this.containerClass) {\n                this.classMap[this.containerClass] = true;\n            }\n        };\n        TooltipContainerComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'bs-tooltip-container',\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        // tslint:disable-next-line\n                        host: {\n                            '[class]': '\"tooltip in tooltip-\" + placement + \" \" + \"bs-tooltip-\" + placement + \" \" + placement + \" \" + containerClass',\n                            '[class.show]': '!isBs3',\n                            '[class.bs3]': 'isBs3',\n                            '[attr.id]': 'this.id',\n                            role: 'tooltip'\n                        },\n                        template: \"\\n    <div class=\\\"tooltip-arrow arrow\\\"></div>\\n    <div class=\\\"tooltip-inner\\\"><ng-content></ng-content></div>\\n    \",\n                        styles: [\"\\n    :host.tooltip {\\n      display: block;\\n      pointer-events: none;\\n    }\\n    :host.bs3.tooltip.top>.arrow {\\n      margin-left: -2px;\\n    }\\n    :host.bs3.tooltip.bottom {\\n      margin-top: 0px;\\n    }\\n    :host.bs3.bs-tooltip-left, :host.bs3.bs-tooltip-right{\\n      margin: 0px;\\n    }\\n    :host.bs3.bs-tooltip-right .arrow, :host.bs3.bs-tooltip-left .arrow {\\n      margin: .3rem 0;\\n    }\\n  \"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TooltipContainerComponent.ctorParameters = function () { return [\n            { type: TooltipConfig }\n        ]; };\n        return TooltipContainerComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /** @type {?} */\n    var id = 0;\n    var TooltipDirective = /** @class */ (function () {\n        function TooltipDirective(_viewContainerRef, cis, config, _elementRef, _renderer, _positionService) {\n            this._elementRef = _elementRef;\n            this._renderer = _renderer;\n            this._positionService = _positionService;\n            this.tooltipId = id++;\n            /**\n             * Fired when tooltip content changes\n             */\n            /* tslint:disable-next-line:no-any */\n            this.tooltipChange = new core.EventEmitter();\n            /**\n             * Css class for tooltip container\n             */\n            this.containerClass = '';\n            /**\n             * @deprecated - removed, will be added to configuration\n             */\n            this.tooltipAnimation = true;\n            /**\n             * @deprecated\n             */\n            this.tooltipFadeDuration = 150;\n            this.ariaDescribedby = \"tooltip-\" + this.tooltipId;\n            /**\n             * @deprecated\n             */\n            this.tooltipStateChanged = new core.EventEmitter();\n            this._tooltip = cis\n                .createLoader(this._elementRef, _viewContainerRef, this._renderer)\n                .provide({ provide: TooltipConfig, useValue: config });\n            Object.assign(this, config);\n            this.onShown = this._tooltip.onShown;\n            this.onHidden = this._tooltip.onHidden;\n        }\n        Object.defineProperty(TooltipDirective.prototype, \"isOpen\", {\n            /**\n             * Returns whether or not the tooltip is currently being shown\n             */\n            get: /**\n             * Returns whether or not the tooltip is currently being shown\n             * @return {?}\n             */\n            function () {\n                return this._tooltip.isShown;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                if (value) {\n                    this.show();\n                }\n                else {\n                    this.hide();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"htmlContent\", {\n            /** @deprecated - please use `tooltip` instead */\n            set: /**\n             * @deprecated - please use `tooltip` instead\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n                this.tooltip = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_placement\", {\n            /** @deprecated - please use `placement` instead */\n            set: /**\n             * @deprecated - please use `placement` instead\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n                this.placement = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_isOpen\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                utils.warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n                return this.isOpen;\n            },\n            /** @deprecated - please use `isOpen` instead */\n            set: /**\n             * @deprecated - please use `isOpen` instead\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n                this.isOpen = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_enable\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                utils.warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n                return this.isDisabled;\n            },\n            /** @deprecated - please use `isDisabled` instead */\n            set: /**\n             * @deprecated - please use `isDisabled` instead\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n                this.isDisabled = !value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_appendToBody\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                utils.warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n                return this.container === 'body';\n            },\n            /** @deprecated - please use `container=\"body\"` instead */\n            set: /**\n             * @deprecated - please use `container=\"body\"` instead\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n                this.container = value ? 'body' : this.container;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_popupClass\", {\n            /** @deprecated - will replaced with customClass */\n            set: /**\n             * @deprecated - will replaced with customClass\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipClass deprecated');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_tooltipContext\", {\n            /** @deprecated - removed */\n            set: /**\n             * @deprecated - removed\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipContext deprecated');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_tooltipPopupDelay\", {\n            /** @deprecated */\n            set: /**\n             * @deprecated\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n                this.delay = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TooltipDirective.prototype, \"_tooltipTrigger\", {\n            /** @deprecated -  please use `triggers` instead */\n            get: /**\n             * @deprecated -  please use `triggers` instead\n             * @return {?}\n             */\n            function () {\n                utils.warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n                return this.triggers;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                utils.warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n                this.triggers = (value || '').toString();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        TooltipDirective.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            this._tooltip.listen({\n                triggers: this.triggers,\n                show: (/**\n                 * @return {?}\n                 */\n                function () { return _this.show(); })\n            });\n            /* tslint:disable-next-line:no-any */\n            this.tooltipChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                if (!value) {\n                    _this._tooltip.hide();\n                }\n            }));\n        };\n        /**\n         * Toggles an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         */\n        /**\n         * Toggles an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         * @return {?}\n         */\n        TooltipDirective.prototype.toggle = /**\n         * Toggles an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         * @return {?}\n         */\n        function () {\n            if (this.isOpen) {\n                return this.hide();\n            }\n            this.show();\n        };\n        /**\n         * Opens an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         */\n        /**\n         * Opens an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         * @return {?}\n         */\n        TooltipDirective.prototype.show = /**\n         * Opens an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            this._positionService.setOptions({\n                modifiers: {\n                    flip: {\n                        enabled: this.adaptivePosition\n                    },\n                    preventOverflow: {\n                        enabled: this.adaptivePosition\n                    }\n                }\n            });\n            if (this.isOpen ||\n                this.isDisabled ||\n                this._delayTimeoutId ||\n                !this.tooltip) {\n                return;\n            }\n            /** @type {?} */\n            var showTooltip = (/**\n             * @return {?}\n             */\n            function () {\n                if (_this._delayTimeoutId) {\n                    _this._delayTimeoutId = undefined;\n                }\n                _this._tooltip\n                    .attach(TooltipContainerComponent)\n                    .to(_this.container)\n                    .position({ attachment: _this.placement })\n                    .show({\n                    content: _this.tooltip,\n                    placement: _this.placement,\n                    containerClass: _this.containerClass,\n                    id: _this.ariaDescribedby\n                });\n            });\n            /** @type {?} */\n            var cancelDelayedTooltipShowing = (/**\n             * @return {?}\n             */\n            function () {\n                if (_this._tooltipCancelShowFn) {\n                    _this._tooltipCancelShowFn();\n                }\n            });\n            if (this.delay) {\n                /** @type {?} */\n                var _timer_1 = rxjs.timer(this.delay).subscribe((/**\n                 * @return {?}\n                 */\n                function () {\n                    showTooltip();\n                    cancelDelayedTooltipShowing();\n                }));\n                if (this.triggers) {\n                    utils.parseTriggers(this.triggers)\n                        .forEach((/**\n                     * @param {?} trigger\n                     * @return {?}\n                     */\n                    function (trigger) {\n                        _this._tooltipCancelShowFn = _this._renderer.listen(_this._elementRef.nativeElement, trigger.close, (/**\n                         * @return {?}\n                         */\n                        function () {\n                            _timer_1.unsubscribe();\n                            cancelDelayedTooltipShowing();\n                        }));\n                    }));\n                }\n            }\n            else {\n                showTooltip();\n            }\n        };\n        /**\n         * Closes an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         */\n        /**\n         * Closes an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         * @return {?}\n         */\n        TooltipDirective.prototype.hide = /**\n         * Closes an element’s tooltip. This is considered a “manual” triggering of\n         * the tooltip.\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            if (this._delayTimeoutId) {\n                clearTimeout(this._delayTimeoutId);\n                this._delayTimeoutId = undefined;\n            }\n            if (!this._tooltip.isShown) {\n                return;\n            }\n            this._tooltip.instance.classMap.in = false;\n            setTimeout((/**\n             * @return {?}\n             */\n            function () {\n                _this._tooltip.hide();\n            }), this.tooltipFadeDuration);\n        };\n        /**\n         * @return {?}\n         */\n        TooltipDirective.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            this._tooltip.dispose();\n        };\n        TooltipDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[tooltip], [tooltipHtml]',\n                        exportAs: 'bs-tooltip'\n                    },] }\n        ];\n        /** @nocollapse */\n        TooltipDirective.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: componentLoader.ComponentLoaderFactory },\n            { type: TooltipConfig },\n            { type: core.ElementRef },\n            { type: core.Renderer2 },\n            { type: positioning.PositioningService }\n        ]; };\n        TooltipDirective.propDecorators = {\n            adaptivePosition: [{ type: core.Input }],\n            tooltip: [{ type: core.Input }],\n            tooltipChange: [{ type: core.Output }],\n            placement: [{ type: core.Input }],\n            triggers: [{ type: core.Input }],\n            container: [{ type: core.Input }],\n            containerClass: [{ type: core.Input }],\n            isOpen: [{ type: core.Input }],\n            isDisabled: [{ type: core.Input }],\n            delay: [{ type: core.Input }],\n            onShown: [{ type: core.Output }],\n            onHidden: [{ type: core.Output }],\n            htmlContent: [{ type: core.Input, args: ['tooltipHtml',] }],\n            _placement: [{ type: core.Input, args: ['tooltipPlacement',] }],\n            _isOpen: [{ type: core.Input, args: ['tooltipIsOpen',] }],\n            _enable: [{ type: core.Input, args: ['tooltipEnable',] }],\n            _appendToBody: [{ type: core.Input, args: ['tooltipAppendToBody',] }],\n            tooltipAnimation: [{ type: core.Input }],\n            _popupClass: [{ type: core.Input, args: ['tooltipClass',] }],\n            _tooltipContext: [{ type: core.Input, args: ['tooltipContext',] }],\n            _tooltipPopupDelay: [{ type: core.Input, args: ['tooltipPopupDelay',] }],\n            tooltipFadeDuration: [{ type: core.Input }],\n            _tooltipTrigger: [{ type: core.Input, args: ['tooltipTrigger',] }],\n            ariaDescribedby: [{ type: core.HostBinding, args: ['attr.aria-describedby',] }],\n            tooltipStateChanged: [{ type: core.Output }]\n        };\n        __decorate([\n            utils.OnChange(),\n            __metadata(\"design:type\", Object)\n        ], TooltipDirective.prototype, \"tooltip\", void 0);\n        return TooltipDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var TooltipModule = /** @class */ (function () {\n        function TooltipModule() {\n        }\n        /**\n         * @return {?}\n         */\n        TooltipModule.forRoot = /**\n         * @return {?}\n         */\n        function () {\n            return {\n                ngModule: TooltipModule,\n                providers: [TooltipConfig, componentLoader.ComponentLoaderFactory, positioning.PositioningService]\n            };\n        };\n        TooltipModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        declarations: [TooltipDirective, TooltipContainerComponent],\n                        exports: [TooltipDirective],\n                        entryComponents: [TooltipContainerComponent]\n                    },] }\n        ];\n        return TooltipModule;\n    }());\n\n    exports.TooltipConfig = TooltipConfig;\n    exports.TooltipContainerComponent = TooltipContainerComponent;\n    exports.TooltipDirective = TooltipDirective;\n    exports.TooltipModule = TooltipModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}