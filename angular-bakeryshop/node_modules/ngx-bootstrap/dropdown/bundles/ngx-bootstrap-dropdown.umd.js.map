{"version":3,"sources":["c:/Users/vahermih/koolitused/Angular-03-2022/angular-bakeryshop/node_modules/ngx-bootstrap/dropdown/bundles/ngx-bootstrap-dropdown.umd.js"],"names":[],"mappings":"AAAA;iRACwP;qOACnC;;sFAEtI;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6C1E;;;;wEAGC;;;;;;;;;;;;;;;;;;;;;;SAsBD,AAGC;;;;;;kIAE0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAuE1D,AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uRAOG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAubH,AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsBA;;;;;;;;;;;;;;;SAeD,AAMC;;;;;;;;;;;;;;gIAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmGH,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAoCA;;;;;;;;;;;;;;;;;;;;;;;;;sJAgBA","file":"ngx-bootstrap-dropdown.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('ngx-bootstrap/component-loader'), require('ngx-bootstrap/utils'), require('ngx-bootstrap/positioning')) :\n    typeof define === 'function' && define.amd ? define('ngx-bootstrap/dropdown', ['exports', '@angular/core', 'rxjs/operators', 'ngx-bootstrap/component-loader', 'ngx-bootstrap/utils', 'ngx-bootstrap/positioning'], factory) :\n    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].dropdown = {}), global.ng.core, global.rxjs.operators, global.componentLoader, global.utils, global.positioning));\n}(this, function (exports, core, operators, componentLoader, utils, positioning) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    /**\n     * Default dropdown configuration\n     */\n    var BsDropdownConfig = /** @class */ (function () {\n        function BsDropdownConfig() {\n            /**\n             * default dropdown auto closing behavior\n             */\n            this.autoClose = true;\n            /**\n             * default dropdown auto closing behavior\n             */\n            this.insideClick = false;\n        }\n        BsDropdownConfig.decorators = [\n            { type: core.Injectable }\n        ];\n        return BsDropdownConfig;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var BsDropdownState = /** @class */ (function () {\n        function BsDropdownState() {\n            var _this = this;\n            this.direction = 'down';\n            this.isOpenChange = new core.EventEmitter();\n            this.isDisabledChange = new core.EventEmitter();\n            this.toggleClick = new core.EventEmitter();\n            this.dropdownMenu = new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            function (resolve) {\n                _this.resolveDropdownMenu = resolve;\n            }));\n        }\n        BsDropdownState.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        BsDropdownState.ctorParameters = function () { return []; };\n        return BsDropdownState;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var BsDropdownContainerComponent = /** @class */ (function () {\n        function BsDropdownContainerComponent(_state, cd, _renderer, _element) {\n            var _this = this;\n            this._state = _state;\n            this.cd = cd;\n            this._renderer = _renderer;\n            this._element = _element;\n            this.isOpen = false;\n            this._subscription = _state.isOpenChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                _this.isOpen = value;\n                /** @type {?} */\n                var dropdown = _this._element.nativeElement.querySelector('.dropdown-menu');\n                if (dropdown && !utils.isBs3()) {\n                    _this._renderer.addClass(dropdown, 'show');\n                    if (dropdown.classList.contains('dropdown-menu-right')) {\n                        _this._renderer.setStyle(dropdown, 'left', 'auto');\n                        _this._renderer.setStyle(dropdown, 'right', '0');\n                    }\n                    if (_this.direction === 'up') {\n                        _this._renderer.setStyle(dropdown, 'top', 'auto');\n                        _this._renderer.setStyle(dropdown, 'transform', 'translateY(-101%)');\n                    }\n                }\n                _this.cd.markForCheck();\n                _this.cd.detectChanges();\n            }));\n        }\n        Object.defineProperty(BsDropdownContainerComponent.prototype, \"direction\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._state.direction;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        /**\n         * \\@internal\n         * @param {?} el\n         * @return {?}\n         */\n        BsDropdownContainerComponent.prototype._contains = /**\n         * \\@internal\n         * @param {?} el\n         * @return {?}\n         */\n        function (el) {\n            return this._element.nativeElement.contains(el);\n        };\n        /**\n         * @return {?}\n         */\n        BsDropdownContainerComponent.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            this._subscription.unsubscribe();\n        };\n        BsDropdownContainerComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'bs-dropdown-container',\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        host: {\n                            style: 'display:block;position: absolute;'\n                        },\n                        template: \"\\n    <div [class.dropup]=\\\"direction === 'up'\\\"\\n         [class.dropdown]=\\\"direction === 'down'\\\"\\n         [class.show]=\\\"isOpen\\\"\\n         [class.open]=\\\"isOpen\\\"><ng-content></ng-content></div>\\n  \"\n                    }] }\n        ];\n        /** @nocollapse */\n        BsDropdownContainerComponent.ctorParameters = function () { return [\n            { type: BsDropdownState },\n            { type: core.ChangeDetectorRef },\n            { type: core.Renderer2 },\n            { type: core.ElementRef }\n        ]; };\n        return BsDropdownContainerComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var BsDropdownDirective = /** @class */ (function () {\n        function BsDropdownDirective(_elementRef, _renderer, _viewContainerRef, _cis, _config, _state) {\n            this._elementRef = _elementRef;\n            this._renderer = _renderer;\n            this._viewContainerRef = _viewContainerRef;\n            this._cis = _cis;\n            this._config = _config;\n            this._state = _state;\n            // todo: move to component loader\n            this._isInlineOpen = false;\n            this._subscriptions = [];\n            this._isInited = false;\n            // set initial dropdown state from config\n            this._state.autoClose = this._config.autoClose;\n            this._state.insideClick = this._config.insideClick;\n            // create dropdown component loader\n            this._dropdown = this._cis\n                .createLoader(this._elementRef, this._viewContainerRef, this._renderer)\n                .provide({ provide: BsDropdownState, useValue: this._state });\n            this.onShown = this._dropdown.onShown;\n            this.onHidden = this._dropdown.onHidden;\n            this.isOpenChange = this._state.isOpenChange;\n        }\n        Object.defineProperty(BsDropdownDirective.prototype, \"autoClose\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._state.autoClose;\n            },\n            /**\n             * Indicates that dropdown will be closed on item or document click,\n             * and after pressing ESC\n             */\n            set: /**\n             * Indicates that dropdown will be closed on item or document click,\n             * and after pressing ESC\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this._state.autoClose = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BsDropdownDirective.prototype, \"insideClick\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._state.insideClick;\n            },\n            /**\n             * This attribute indicates that the dropdown shouldn't close on inside click when autoClose is set to true\n             */\n            set: /**\n             * This attribute indicates that the dropdown shouldn't close on inside click when autoClose is set to true\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this._state.insideClick = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BsDropdownDirective.prototype, \"isDisabled\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return this._isDisabled;\n            },\n            /**\n             * Disables dropdown toggle and hides dropdown menu if opened\n             */\n            set: /**\n             * Disables dropdown toggle and hides dropdown menu if opened\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                this._isDisabled = value;\n                this._state.isDisabledChange.emit(value);\n                if (value) {\n                    this.hide();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BsDropdownDirective.prototype, \"isOpen\", {\n            /**\n             * Returns whether or not the popover is currently being shown\n             */\n            get: /**\n             * Returns whether or not the popover is currently being shown\n             * @return {?}\n             */\n            function () {\n                if (this._showInline) {\n                    return this._isInlineOpen;\n                }\n                return this._dropdown.isShown;\n            },\n            set: /**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                if (value) {\n                    this.show();\n                }\n                else {\n                    this.hide();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BsDropdownDirective.prototype, \"isBs4\", {\n            get: /**\n             * @return {?}\n             */\n            function () {\n                return !utils.isBs3();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BsDropdownDirective.prototype, \"_showInline\", {\n            get: /**\n             * @private\n             * @return {?}\n             */\n            function () {\n                return !this.container;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.ngOnInit = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            // fix: seems there are an issue with `routerLinkActive`\n            // which result in duplicated call ngOnInit without call to ngOnDestroy\n            // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n            if (this._isInited) {\n                return;\n            }\n            this._isInited = true;\n            // attach DOM listeners\n            this._dropdown.listen({\n                // because of dropdown inline mode\n                outsideClick: false,\n                triggers: this.triggers,\n                show: (/**\n                 * @return {?}\n                 */\n                function () { return _this.show(); })\n            });\n            // toggle visibility on toggle element click\n            this._subscriptions.push(this._state.toggleClick.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return _this.toggle(value); })));\n            // hide dropdown if set disabled while opened\n            this._subscriptions.push(this._state.isDisabledChange\n                .pipe(operators.filter((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return value; })))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return _this.hide(); })));\n        };\n        /**\n         * Opens an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         */\n        /**\n         * Opens an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.show = /**\n         * Opens an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            if (this.isOpen || this.isDisabled) {\n                return;\n            }\n            if (this._showInline) {\n                if (!this._inlinedMenu) {\n                    this._state.dropdownMenu.then((/**\n                     * @param {?} dropdownMenu\n                     * @return {?}\n                     */\n                    function (dropdownMenu) {\n                        _this._dropdown.attachInline(dropdownMenu.viewContainer, dropdownMenu.templateRef);\n                        _this._inlinedMenu = _this._dropdown._inlineViewRef;\n                        _this.addBs4Polyfills();\n                    }))\n                        // swallow errors\n                        .catch();\n                }\n                this.addBs4Polyfills();\n                this._isInlineOpen = true;\n                this.onShown.emit(true);\n                this._state.isOpenChange.emit(true);\n                return;\n            }\n            this._state.dropdownMenu.then((/**\n             * @param {?} dropdownMenu\n             * @return {?}\n             */\n            function (dropdownMenu) {\n                // check direction in which dropdown should be opened\n                /** @type {?} */\n                var _dropup = _this.dropup ||\n                    (typeof _this.dropup !== 'undefined' && _this.dropup);\n                _this._state.direction = _dropup ? 'up' : 'down';\n                /** @type {?} */\n                var _placement = _this.placement || (_dropup ? 'top start' : 'bottom start');\n                // show dropdown\n                _this._dropdown\n                    .attach(BsDropdownContainerComponent)\n                    .to(_this.container)\n                    .position({ attachment: _placement })\n                    .show({\n                    content: dropdownMenu.templateRef,\n                    placement: _placement\n                });\n                _this._state.isOpenChange.emit(true);\n            }))\n                // swallow error\n                .catch();\n        };\n        /**\n         * Closes an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         */\n        /**\n         * Closes an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.hide = /**\n         * Closes an element’s popover. This is considered a “manual” triggering of\n         * the popover.\n         * @return {?}\n         */\n        function () {\n            if (!this.isOpen) {\n                return;\n            }\n            if (this._showInline) {\n                this.removeShowClass();\n                this.removeDropupStyles();\n                this._isInlineOpen = false;\n                this.onHidden.emit(true);\n            }\n            else {\n                this._dropdown.hide();\n            }\n            this._state.isOpenChange.emit(false);\n        };\n        /**\n         * Toggles an element’s popover. This is considered a “manual” triggering of\n         * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\n         * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\n         */\n        /**\n         * Toggles an element’s popover. This is considered a “manual” triggering of\n         * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\n         * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\n         * @param {?=} value\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.toggle = /**\n         * Toggles an element’s popover. This is considered a “manual” triggering of\n         * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\n         * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\n         * @param {?=} value\n         * @return {?}\n         */\n        function (value) {\n            if (this.isOpen || !value) {\n                return this.hide();\n            }\n            return this.show();\n        };\n        /** @internal */\n        /**\n         * \\@internal\n         * @param {?} event\n         * @return {?}\n         */\n        BsDropdownDirective.prototype._contains = /**\n         * \\@internal\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            return this._elementRef.nativeElement.contains(event.target) ||\n                (this._dropdown.instance && this._dropdown.instance._contains(event.target));\n        };\n        /**\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            var e_1, _a;\n            try {\n                // clean up subscriptions and destroy dropdown\n                for (var _b = __values(this._subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var sub = _c.value;\n                    sub.unsubscribe();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this._dropdown.dispose();\n        };\n        /**\n         * @private\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.addBs4Polyfills = /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            if (!utils.isBs3()) {\n                this.addShowClass();\n                this.checkRightAlignment();\n                this.addDropupStyles();\n            }\n        };\n        /**\n         * @private\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.addShowClass = /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n                this._renderer.addClass(this._inlinedMenu.rootNodes[0], 'show');\n            }\n        };\n        /**\n         * @private\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.removeShowClass = /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n                this._renderer.removeClass(this._inlinedMenu.rootNodes[0], 'show');\n            }\n        };\n        /**\n         * @private\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.checkRightAlignment = /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n                /** @type {?} */\n                var isRightAligned = this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-right');\n                this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'left', isRightAligned ? 'auto' : '0');\n                this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'right', isRightAligned ? '0' : 'auto');\n            }\n        };\n        /**\n         * @private\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.addDropupStyles = /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n                // a little hack to not break support of bootstrap 4 beta\n                this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'top', this.dropup ? 'auto' : '100%');\n                this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'transform', this.dropup ? 'translateY(-101%)' : 'translateY(0)');\n                this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'bottom', 'auto');\n            }\n        };\n        /**\n         * @private\n         * @return {?}\n         */\n        BsDropdownDirective.prototype.removeDropupStyles = /**\n         * @private\n         * @return {?}\n         */\n        function () {\n            if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n                this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'top');\n                this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'transform');\n                this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'bottom');\n            }\n        };\n        BsDropdownDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[bsDropdown],[dropdown]',\n                        exportAs: 'bs-dropdown',\n                        providers: [BsDropdownState],\n                        host: {\n                            '[class.dropup]': 'dropup',\n                            '[class.open]': 'isOpen',\n                            '[class.show]': 'isOpen && isBs4'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        BsDropdownDirective.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.Renderer2 },\n            { type: core.ViewContainerRef },\n            { type: componentLoader.ComponentLoaderFactory },\n            { type: BsDropdownConfig },\n            { type: BsDropdownState }\n        ]; };\n        BsDropdownDirective.propDecorators = {\n            placement: [{ type: core.Input }],\n            triggers: [{ type: core.Input }],\n            container: [{ type: core.Input }],\n            dropup: [{ type: core.Input }],\n            autoClose: [{ type: core.Input }],\n            insideClick: [{ type: core.Input }],\n            isDisabled: [{ type: core.Input }],\n            isOpen: [{ type: core.Input }],\n            isOpenChange: [{ type: core.Output }],\n            onShown: [{ type: core.Output }],\n            onHidden: [{ type: core.Output }]\n        };\n        return BsDropdownDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var BsDropdownMenuDirective = /** @class */ (function () {\n        // tslint:disable:no-any\n        function BsDropdownMenuDirective(_state, _viewContainer, _templateRef) {\n            _state.resolveDropdownMenu({\n                templateRef: _templateRef,\n                viewContainer: _viewContainer\n            });\n        }\n        BsDropdownMenuDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[bsDropdownMenu],[dropdownMenu]',\n                        exportAs: 'bs-dropdown-menu'\n                    },] }\n        ];\n        /** @nocollapse */\n        BsDropdownMenuDirective.ctorParameters = function () { return [\n            { type: BsDropdownState },\n            { type: core.ViewContainerRef },\n            { type: core.TemplateRef }\n        ]; };\n        return BsDropdownMenuDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var BsDropdownToggleDirective = /** @class */ (function () {\n        function BsDropdownToggleDirective(_changeDetectorRef, _dropdown, _element, _renderer, _state) {\n            var _this = this;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dropdown = _dropdown;\n            this._element = _element;\n            this._renderer = _renderer;\n            this._state = _state;\n            this.isDisabled = null;\n            this._subscriptions = [];\n            // sync is open value with state\n            this._subscriptions.push(this._state.isOpenChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) {\n                _this.isOpen = value;\n                if (value) {\n                    _this._documentClickListener = _this._renderer.listen('document', 'click', (/**\n                     * @param {?} event\n                     * @return {?}\n                     */\n                    function (event) {\n                        if (_this._state.autoClose && event.button !== 2 &&\n                            !_this._element.nativeElement.contains(event.target) &&\n                            !(_this._state.insideClick && _this._dropdown._contains(event))) {\n                            _this._state.toggleClick.emit(false);\n                            _this._changeDetectorRef.detectChanges();\n                        }\n                    }));\n                    _this._escKeyUpListener = _this._renderer.listen(_this._element.nativeElement, 'keyup.esc', (/**\n                     * @return {?}\n                     */\n                    function () {\n                        if (_this._state.autoClose) {\n                            _this._state.toggleClick.emit(false);\n                            _this._changeDetectorRef.detectChanges();\n                        }\n                    }));\n                }\n                else {\n                    _this._documentClickListener();\n                    _this._escKeyUpListener();\n                }\n            })));\n            // populate disabled state\n            this._subscriptions.push(this._state.isDisabledChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return (_this.isDisabled = value || null); })));\n        }\n        /**\n         * @return {?}\n         */\n        BsDropdownToggleDirective.prototype.onClick = /**\n         * @return {?}\n         */\n        function () {\n            if (this.isDisabled) {\n                return;\n            }\n            this._state.toggleClick.emit(true);\n        };\n        /**\n         * @return {?}\n         */\n        BsDropdownToggleDirective.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n        function () {\n            var e_1, _a;\n            if (this._documentClickListener) {\n                this._documentClickListener();\n            }\n            if (this._escKeyUpListener) {\n                this._escKeyUpListener();\n            }\n            try {\n                for (var _b = __values(this._subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var sub = _c.value;\n                    sub.unsubscribe();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        BsDropdownToggleDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[bsDropdownToggle],[dropdownToggle]',\n                        exportAs: 'bs-dropdown-toggle',\n                        host: {\n                            '[attr.aria-haspopup]': 'true'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        BsDropdownToggleDirective.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: BsDropdownDirective },\n            { type: core.ElementRef },\n            { type: core.Renderer2 },\n            { type: BsDropdownState }\n        ]; };\n        BsDropdownToggleDirective.propDecorators = {\n            isDisabled: [{ type: core.HostBinding, args: ['attr.disabled',] }],\n            isOpen: [{ type: core.HostBinding, args: ['attr.aria-expanded',] }],\n            onClick: [{ type: core.HostListener, args: ['click', [],] }]\n        };\n        return BsDropdownToggleDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var BsDropdownModule = /** @class */ (function () {\n        function BsDropdownModule() {\n        }\n        // tslint:disable-next-line:no-any\n        // tslint:disable-next-line:no-any\n        /**\n         * @param {?=} config\n         * @return {?}\n         */\n        BsDropdownModule.forRoot = \n        // tslint:disable-next-line:no-any\n        /**\n         * @param {?=} config\n         * @return {?}\n         */\n        function (config) {\n            return {\n                ngModule: BsDropdownModule,\n                providers: [\n                    componentLoader.ComponentLoaderFactory,\n                    positioning.PositioningService,\n                    BsDropdownState,\n                    {\n                        provide: BsDropdownConfig,\n                        useValue: config ? config : { autoClose: true, insideClick: false }\n                    }\n                ]\n            };\n        };\n        BsDropdownModule.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [\n                            BsDropdownMenuDirective,\n                            BsDropdownToggleDirective,\n                            BsDropdownContainerComponent,\n                            BsDropdownDirective\n                        ],\n                        exports: [\n                            BsDropdownMenuDirective,\n                            BsDropdownToggleDirective,\n                            BsDropdownDirective\n                        ],\n                        entryComponents: [BsDropdownContainerComponent]\n                    },] }\n        ];\n        return BsDropdownModule;\n    }());\n\n    exports.BsDropdownConfig = BsDropdownConfig;\n    exports.BsDropdownContainerComponent = BsDropdownContainerComponent;\n    exports.BsDropdownDirective = BsDropdownDirective;\n    exports.BsDropdownMenuDirective = BsDropdownMenuDirective;\n    exports.BsDropdownModule = BsDropdownModule;\n    exports.BsDropdownState = BsDropdownState;\n    exports.BsDropdownToggleDirective = BsDropdownToggleDirective;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}