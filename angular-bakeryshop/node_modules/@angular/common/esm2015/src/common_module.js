/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgModule } from '@angular/core';
import { COMMON_DIRECTIVES } from './directives/index';
import { DEPRECATED_PLURAL_FN, NgLocaleLocalization, NgLocalization, getPluralCase } from './i18n/localization';
import { COMMON_DEPRECATED_I18N_PIPES } from './pipes/deprecated/index';
import { COMMON_PIPES } from './pipes/index';
// Note: This does not contain the location providers,
// as they need some platform specific implementations to work.
/**
 * Exports all the basic Angular directives and pipes,
 * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * * The `providers` options configure the NgModule's injector to provide
 * localization dependencies to members.
 * * The `exports` options make the declared directives and pipes available for import
 * by other NgModules.
 *
 * \@publicApi
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './directives/ng_class';
import * as ɵngcc2 from './directives/ng_component_outlet';
import * as ɵngcc3 from './directives/ng_for_of';
import * as ɵngcc4 from './directives/ng_if';
import * as ɵngcc5 from './directives/ng_template_outlet';
import * as ɵngcc6 from './directives/ng_style';
import * as ɵngcc7 from './directives/ng_switch';
import * as ɵngcc8 from './directives/ng_plural';
import * as ɵngcc9 from './pipes/async_pipe';
import * as ɵngcc10 from './pipes/case_conversion_pipes';
import * as ɵngcc11 from './pipes/json_pipe';
import * as ɵngcc12 from './pipes/slice_pipe';
import * as ɵngcc13 from './pipes/number_pipe';
import * as ɵngcc14 from './pipes/date_pipe';
import * as ɵngcc15 from './pipes/i18n_plural_pipe';
import * as ɵngcc16 from './pipes/i18n_select_pipe';
import * as ɵngcc17 from './pipes/keyvalue_pipe';
import * as ɵngcc18 from './pipes/deprecated/number_pipe';
import * as ɵngcc19 from './pipes/deprecated/date_pipe';
export class CommonModule {
}
CommonModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: CommonModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(CommonModule, { declarations: [ɵngcc1.NgClass, ɵngcc2.NgComponentOutlet, ɵngcc3.NgForOf, ɵngcc4.NgIf, ɵngcc5.NgTemplateOutlet, ɵngcc6.NgStyle, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.NgPlural, ɵngcc8.NgPluralCase, ɵngcc9.AsyncPipe, ɵngcc10.UpperCasePipe, ɵngcc10.LowerCasePipe, ɵngcc11.JsonPipe, ɵngcc12.SlicePipe, ɵngcc13.DecimalPipe, ɵngcc13.PercentPipe, ɵngcc10.TitleCasePipe, ɵngcc13.CurrencyPipe, ɵngcc14.DatePipe, ɵngcc15.I18nPluralPipe, ɵngcc16.I18nSelectPipe, ɵngcc17.KeyValuePipe], exports: [ɵngcc1.NgClass, ɵngcc2.NgComponentOutlet, ɵngcc3.NgForOf, ɵngcc4.NgIf, ɵngcc5.NgTemplateOutlet, ɵngcc6.NgStyle, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.NgPlural, ɵngcc8.NgPluralCase, ɵngcc9.AsyncPipe, ɵngcc10.UpperCasePipe, ɵngcc10.LowerCasePipe, ɵngcc11.JsonPipe, ɵngcc12.SlicePipe, ɵngcc13.DecimalPipe, ɵngcc13.PercentPipe, ɵngcc10.TitleCasePipe, ɵngcc13.CurrencyPipe, ɵngcc14.DatePipe, ɵngcc15.I18nPluralPipe, ɵngcc16.I18nSelectPipe, ɵngcc17.KeyValuePipe] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CommonModule, [{
        type: NgModule,
        args: [{
                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                providers: [
                    { provide: NgLocalization, useClass: NgLocaleLocalization },
                ]
            }]
    }], null, null);
CommonModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function CommonModule_Factory(t) { return new (t || CommonModule)(); }, providers: [
        { provide: NgLocalization, useClass: NgLocaleLocalization },
    ] });
const ɵ0 = getPluralCase;
/**
 * A module that contains the deprecated i18n pipes.
 *
 * @deprecated from v5
 * \@publicApi
 */
export class DeprecatedI18NPipesModule {
}
DeprecatedI18NPipesModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: DeprecatedI18NPipesModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(DeprecatedI18NPipesModule, { declarations: [ɵngcc18.DeprecatedDecimalPipe, ɵngcc18.DeprecatedPercentPipe, ɵngcc18.DeprecatedCurrencyPipe, ɵngcc19.DeprecatedDatePipe], exports: [ɵngcc18.DeprecatedDecimalPipe, ɵngcc18.DeprecatedPercentPipe, ɵngcc18.DeprecatedCurrencyPipe, ɵngcc19.DeprecatedDatePipe] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(DeprecatedI18NPipesModule, [{
        type: NgModule,
        args: [{
                declarations: [COMMON_DEPRECATED_I18N_PIPES],
                exports: [COMMON_DEPRECATED_I18N_PIPES],
                providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }]
            }]
    }], null, null);
DeprecatedI18NPipesModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function DeprecatedI18NPipesModule_Factory(t) { return new (t || DeprecatedI18NPipesModule)(); }, providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }] });
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29tbW9uL2VzbTIwMTUvc3JjL2NvbW1vbl9tb2R1bGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQTs7Ozs7Ozs7Ozs7Ozs7OztDQUNDLFFBU0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBU0QsOE9BT0MiLCJmaWxlIjoiY29tbW9uX21vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDT01NT05fRElSRUNUSVZFUyB9IGZyb20gJy4vZGlyZWN0aXZlcy9pbmRleCc7XG5pbXBvcnQgeyBERVBSRUNBVEVEX1BMVVJBTF9GTiwgTmdMb2NhbGVMb2NhbGl6YXRpb24sIE5nTG9jYWxpemF0aW9uLCBnZXRQbHVyYWxDYXNlIH0gZnJvbSAnLi9pMThuL2xvY2FsaXphdGlvbic7XG5pbXBvcnQgeyBDT01NT05fREVQUkVDQVRFRF9JMThOX1BJUEVTIH0gZnJvbSAnLi9waXBlcy9kZXByZWNhdGVkL2luZGV4JztcbmltcG9ydCB7IENPTU1PTl9QSVBFUyB9IGZyb20gJy4vcGlwZXMvaW5kZXgnO1xuLy8gTm90ZTogVGhpcyBkb2VzIG5vdCBjb250YWluIHRoZSBsb2NhdGlvbiBwcm92aWRlcnMsXG4vLyBhcyB0aGV5IG5lZWQgc29tZSBwbGF0Zm9ybSBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMgdG8gd29yay5cbi8qKlxuICogRXhwb3J0cyBhbGwgdGhlIGJhc2ljIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmQgcGlwZXMsXG4gKiBzdWNoIGFzIGBOZ0lmYCwgYE5nRm9yT2ZgLCBgRGVjaW1hbFBpcGVgLCBhbmQgc28gb24uXG4gKiBSZS1leHBvcnRlZCBieSBgQnJvd3Nlck1vZHVsZWAsIHdoaWNoIGlzIGluY2x1ZGVkIGF1dG9tYXRpY2FsbHkgaW4gdGhlIHJvb3RcbiAqIGBBcHBNb2R1bGVgIHdoZW4geW91IGNyZWF0ZSBhIG5ldyBhcHAgd2l0aCB0aGUgQ0xJIGBuZXdgIGNvbW1hbmQuXG4gKlxuICogKiBUaGUgYHByb3ZpZGVyc2Agb3B0aW9ucyBjb25maWd1cmUgdGhlIE5nTW9kdWxlJ3MgaW5qZWN0b3IgdG8gcHJvdmlkZVxuICogbG9jYWxpemF0aW9uIGRlcGVuZGVuY2llcyB0byBtZW1iZXJzLlxuICogKiBUaGUgYGV4cG9ydHNgIG9wdGlvbnMgbWFrZSB0aGUgZGVjbGFyZWQgZGlyZWN0aXZlcyBhbmQgcGlwZXMgYXZhaWxhYmxlIGZvciBpbXBvcnRcbiAqIGJ5IG90aGVyIE5nTW9kdWxlcy5cbiAqXG4gKiBcXEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1vbk1vZHVsZSB7XG59XG5Db21tb25Nb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW0NPTU1PTl9ESVJFQ1RJVkVTLCBDT01NT05fUElQRVNdLFxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtDT01NT05fRElSRUNUSVZFUywgQ09NTU9OX1BJUEVTXSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgeyBwcm92aWRlOiBOZ0xvY2FsaXphdGlvbiwgdXNlQ2xhc3M6IE5nTG9jYWxlTG9jYWxpemF0aW9uIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXSB9XG5dO1xuY29uc3QgybUwID0gZ2V0UGx1cmFsQ2FzZTtcbi8qKlxuICogQSBtb2R1bGUgdGhhdCBjb250YWlucyB0aGUgZGVwcmVjYXRlZCBpMThuIHBpcGVzLlxuICpcbiAqIEBkZXByZWNhdGVkIGZyb20gdjVcbiAqIFxcQHB1YmxpY0FwaVxuICovXG5leHBvcnQgY2xhc3MgRGVwcmVjYXRlZEkxOE5QaXBlc01vZHVsZSB7XG59XG5EZXByZWNhdGVkSTE4TlBpcGVzTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtDT01NT05fREVQUkVDQVRFRF9JMThOX1BJUEVTXSxcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBbQ09NTU9OX0RFUFJFQ0FURURfSTE4Tl9QSVBFU10sXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBERVBSRUNBVEVEX1BMVVJBTF9GTiwgdXNlVmFsdWU6IMm1MCB9XSxcbiAgICAgICAgICAgIH0sXSB9XG5dO1xuZXhwb3J0IHsgybUwIH07XG4iXX0=