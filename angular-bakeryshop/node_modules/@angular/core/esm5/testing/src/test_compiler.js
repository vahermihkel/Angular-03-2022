/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Compiler, Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
function unimplemented() {
    throw Error('unimplemented');
}
/**
 * Special interface to the compiler only used by testing
 *
 * @publicApi
 */
var TestingCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(TestingCompiler, _super);
    function TestingCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestingCompiler.prototype, "injector", {
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    TestingCompiler.prototype.overrideModule = function (module, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideComponent = function (component, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overridePipe = function (directive, overrides) {
        throw unimplemented();
    };
    /**
     * Allows to pass the compile summary from AOT compilation to the JIT compiler,
     * so that it can use the code generated by AOT.
     */
    TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };
    /**
     * Gets the component factory for the given component.
     * This assumes that the component has been compiled before calling this call using
     * `compileModuleAndAllComponents*`.
     */
    TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };
    /**
     * Returns the component type that is stored in the given error.
     * This can be used for errors created by compileModule...
     */
    TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };
TestingCompiler.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); }, providedIn: null });
const ɵTestingCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{
        type: Injectable
    }], null, { injector: [], overrideModule: [], overrideDirective: [], overrideComponent: [], overridePipe: [], loadAotSummaries: [], getComponentFactory: [], getComponentFromError: [] });
    return TestingCompiler;
}(Compiler));
export { TestingCompiler };
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 */
var TestingCompilerFactory = /** @class */ (function () {
    function TestingCompilerFactory() {
    }
    return TestingCompilerFactory;
}());
export { TestingCompilerFactory };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3ZhaGVybWloL2tvb2xpdHVzZWQvQW5ndWxhci0wMy0yMDIyL2FuZ3VsYXItYmFrZXJ5c2hvcC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc201L3Rlc3Rpbmcvc3JjL3Rlc3RfY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tHQTZDa0c7Ozs7OzhMQUcxRSIsImZpbGUiOiJ0ZXN0X2NvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IENvbXBpbGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5mdW5jdGlvbiB1bmltcGxlbWVudGVkKCkge1xuICAgIHRocm93IEVycm9yKCd1bmltcGxlbWVudGVkJyk7XG59XG4vKipcbiAqIFNwZWNpYWwgaW50ZXJmYWNlIHRvIHRoZSBjb21waWxlciBvbmx5IHVzZWQgYnkgdGVzdGluZ1xuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFRlc3RpbmdDb21waWxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhUZXN0aW5nQ29tcGlsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGVzdGluZ0NvbXBpbGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLCBcImluamVjdG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZU1vZHVsZSA9IGZ1bmN0aW9uIChtb2R1bGUsIG92ZXJyaWRlcykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XG4gICAgfTtcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlRGlyZWN0aXZlID0gZnVuY3Rpb24gKGRpcmVjdGl2ZSwgb3ZlcnJpZGVzKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9O1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUub3ZlcnJpZGVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBvdmVycmlkZXMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICAgIH07XG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZVBpcGUgPSBmdW5jdGlvbiAoZGlyZWN0aXZlLCBvdmVycmlkZXMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHBhc3MgdGhlIGNvbXBpbGUgc3VtbWFyeSBmcm9tIEFPVCBjb21waWxhdGlvbiB0byB0aGUgSklUIGNvbXBpbGVyLFxuICAgICAqIHNvIHRoYXQgaXQgY2FuIHVzZSB0aGUgY29kZSBnZW5lcmF0ZWQgYnkgQU9ULlxuICAgICAqL1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUubG9hZEFvdFN1bW1hcmllcyA9IGZ1bmN0aW9uIChzdW1tYXJpZXMpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNvbXBvbmVudCBmYWN0b3J5IGZvciB0aGUgZ2l2ZW4gY29tcG9uZW50LlxuICAgICAqIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBjb21wb25lbnQgaGFzIGJlZW4gY29tcGlsZWQgYmVmb3JlIGNhbGxpbmcgdGhpcyBjYWxsIHVzaW5nXG4gICAgICogYGNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzKmAuXG4gICAgICovXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5nZXRDb21wb25lbnRGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IHR5cGUgdGhhdCBpcyBzdG9yZWQgaW4gdGhlIGdpdmVuIGVycm9yLlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgZm9yIGVycm9ycyBjcmVhdGVkIGJ5IGNvbXBpbGVNb2R1bGUuLi5cbiAgICAgKi9cbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLmdldENvbXBvbmVudEZyb21FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH07XG4gICAgVGVzdGluZ0NvbXBpbGVyID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpXG4gICAgXSwgVGVzdGluZ0NvbXBpbGVyKTtcbiAgICByZXR1cm4gVGVzdGluZ0NvbXBpbGVyO1xufShDb21waWxlcikpO1xuZXhwb3J0IHsgVGVzdGluZ0NvbXBpbGVyIH07XG4vKipcbiAqIEEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgYSBDb21waWxlclxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFRlc3RpbmdDb21waWxlckZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGVzdGluZ0NvbXBpbGVyRmFjdG9yeSgpIHtcbiAgICB9XG4gICAgcmV0dXJuIFRlc3RpbmdDb21waWxlckZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0IHsgVGVzdGluZ0NvbXBpbGVyRmFjdG9yeSB9O1xuIl19